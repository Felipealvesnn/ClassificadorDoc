@{
    ViewData["Title"] = "Classificar Lote de Documentos";
}

@using (Html.BeginForm("Upload", "Classificacao", FormMethod.Post, new
{
    enctype = "multipart/form-data",
    style = "display:none;",
    id = "hiddenForm"
}))
{
    @Html.AntiForgeryToken()
}

<!-- Container para alertas da página -->
<div id="pageAlerts"></div>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Classificar Lote de Documentos</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <a asp-controller="Home" asp-action="Index" class="btn btn-sm btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> Voltar ao Dashboard
            </a>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <!-- Área de Upload -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Upload de Lote (ZIP)</h6>
            </div>
            <div class="card-body">
                <div class="upload-area" id="uploadArea" onclick="document.getElementById('fileInput').click()">
                    <div class="upload-icon">
                        <i class="fas fa-cloud-upload-alt"></i>
                    </div>
                    <h5>Arraste e solte seu arquivo ZIP aqui</h5>
                    <p class="text-muted">ou clique para selecionar arquivo ZIP</p>
                    <small class="text-muted">
                        <strong>Formato:</strong> ZIP contendo múltiplos arquivos PDF (máx. 100MB)<br>
                        <strong>Exemplo:</strong> lote_documentos.zip com 10-50 PDFs
                    </small>
                </div>

                <input type="file" id="fileInput" accept=".zip" style="display: none;" />

                <!-- Informações do arquivo selecionado -->
                <div id="fileInfo" class="mt-3" style="display: none;">
                    <div class="alert alert-info alert-permanent">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <i class="fas fa-file"></i>
                                <span id="fileName"></span>
                                <small class="text-muted">(<span id="fileSize"></span>)</small>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="forceClearFile()">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Botões de ação -->
                <div id="actionButtons" class="mt-3" style="display: none;">
                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <button type="button" class="btn btn-outline-secondary me-md-2" onclick="forceClearFile()">
                            <i class="fas fa-times"></i> Cancelar
                        </button>
                        <button type="button" class="btn btn-primary" onclick="classifyDocument()">
                            <i class="fas fa-magic"></i> Classificar Lote de Documentos
                        </button>
                    </div>
                </div>

                <!-- Loading e Status -->
                <div id="loadingArea" class="text-center" style="display: none;">
                    <div class="loading-spinner"></div>
                    <p class="mt-3">Processando lote de documentos...</p>
                    <small class="text-muted">Analisando múltiplos PDFs - isso pode levar alguns minutos</small>
                </div>

                <!-- Área de Resultado Rápido -->
                <div id="quickResultArea" class="mt-4" style="display: none;">
                    <div class="alert alert-success">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="alert-heading mb-2">
                                    <i class="fas fa-check-circle"></i> Lote Processado com Sucesso!
                                </h6>
                                <div id="quickResultContent">
                                    <!-- Conteúdo será preenchido dinamicamente -->
                                </div>
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-success btn-sm" id="viewFullReportBtn">
                                    <i class="fas fa-chart-bar"></i> Ver Relatório Completo
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Resultado da Classificação -->
        <div id="resultArea" class="card shadow mb-4" style="display: none;">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-success">Resultado da Classificação</h6>
            </div>
            <div class="card-body">
                <div id="classificationResult">
                    <!-- Resultado será inserido aqui via JavaScript -->
                </div>

                <div class="mt-3 d-flex justify-content-between">
                    <button type="button" class="btn btn-outline-primary" onclick="classifyAnother()">
                        <i class="fas fa-plus"></i> Classificar Outro Lote
                    </button>
                    <button type="button" class="btn btn-success" onclick="saveResult()">
                        <i class="fas fa-save"></i> Salvar Resultado
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <!-- Informações e Dicas -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Dicas de Uso</h6>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <h6><i class="fas fa-lightbulb text-warning"></i> Formato Aceito</h6>
                    <ul class="list-unstyled ms-3">
                        <li><i class="fas fa-file-archive text-warning"></i> ZIP contendo múltiplos PDFs</li>
                    </ul>
                </div>

                <div class="mb-3">
                    <h6><i class="fas fa-check-circle text-success"></i> Melhores Práticas</h6>
                    <ul class="small">
                        <li>Organize os PDFs em um único arquivo ZIP</li>
                        <li>Mantenha nomes de arquivo descritivos</li>
                        <li>Tamanho máximo do ZIP: 100MB</li>
                        <li>Recomendado: 10-50 PDFs por lote</li>
                        <li>PDFs com texto legível têm melhor precisão</li>
                    </ul>
                </div>

                <div class="alert alert-info alert-permanent">
                    <small>
                        <i class="fas fa-info-circle"></i>
                        O sistema processa lotes de documentos usando IA avançada para classificação automática de
                        múltiplos PDFs simultaneamente.
                    </small>
                </div>
            </div>
        </div>

        <!-- Histórico Recente -->
        <div class="card shadow">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Classificações Recentes</h6>
            </div>
            <div class="card-body">
                <div class="list-group list-group-flush">
                    <div class="list-group-item p-2">
                        <div class="d-flex justify-content-between">
                            <small class="fw-bold">lote_autuacoes_001.zip</small>
                            <span class="badge bg-danger">Autuações</span>
                        </div>
                        <small class="text-muted">15 documentos - 98% precisão</small>
                    </div>
                    <div class="list-group-item p-2">
                        <div class="d-flex justify-content-between">
                            <small class="fw-bold">defesas_jari_456.zip</small>
                            <span class="badge bg-primary">Defesas</span>
                        </div>
                        <small class="text-muted">8 documentos - 95% precisão</small>
                    </div>
                    <div class="list-group-item p-2">
                        <div class="d-flex justify-content-between">
                            <small class="fw-bold">notificacoes_mix.zip</small>
                            <span class="badge bg-warning">Misto</span>
                        </div>
                        <small class="text-muted">22 documentos - 92% precisão</small>
                    </div>
                </div>
                <div class="text-center mt-3">
                    <a asp-action="History" class="btn btn-sm btn-outline-primary">
                        Ver Histórico Completo
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/toast-notifications.css" />
}

@section Scripts {
    <script src="~/js/toast-manager.js"></script>
    <script>
        let selectedFile = null;
        let isProcessing = false;
        let currentProcessingToast = null;

        // Configurar drag and drop
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            uploadArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, unhighlight, false);
        });

        function highlight(e) {
            uploadArea.classList.add('dragover');
        }

        function unhighlight(e) {
            uploadArea.classList.remove('dragover');
        }

        uploadArea.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles(files);
        }

        fileInput.addEventListener('change', function (e) {
            handleFiles(e.target.files);
        });

        function handleFiles(files) {
            if (files.length > 0) {
                const file = files[0];
                if (validateFile(file)) {
                    selectedFile = file;
                    showFileInfo(file);
                }
            }
        }

        function validateFile(file) {
            const maxSize = 100 * 1024 * 1024; // 100MB
            const allowedTypes = ['application/zip', 'application/x-zip-compressed'];

            if (file.size > maxSize) {
                toastManager.error('Arquivo Muito Grande', 'Tamanho máximo permitido: 100MB');
                return false;
            }

            if (!allowedTypes.includes(file.type) && !file.name.toLowerCase().endsWith('.zip')) {
                toastManager.error('Formato Inválido', 'Apenas arquivos ZIP são aceitos para processamento em lote');
                return false;
            }

            return true;
        }

        function showFileInfo(file) {
            const fileNameElement = document.getElementById('fileName');
            const fileSizeElement = document.getElementById('fileSize');
            const fileInfoElement = document.getElementById('fileInfo');
            const actionButtonsElement = document.getElementById('actionButtons');

            fileNameElement.textContent = file.name;
            fileSizeElement.textContent = formatFileSize(file.size);

            setTimeout(() => {
                fileInfoElement.style.display = 'block';
                actionButtonsElement.style.display = 'block';
            }, 100);
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function clearFile() {
            if (!isProcessing) {
                selectedFile = null;
                fileInput.value = '';
                document.getElementById('fileInfo').style.display = 'none';
                document.getElementById('actionButtons').style.display = 'none';
                document.getElementById('loadingArea').style.display = 'none';
                document.getElementById('quickResultArea').style.display = 'none';
            }
        }

        function forceClearFile() {
            isProcessing = false;
            selectedFile = null;
            fileInput.value = '';
            document.getElementById('fileInfo').style.display = 'none';
            document.getElementById('actionButtons').style.display = 'none';
            document.getElementById('loadingArea').style.display = 'none';
            document.getElementById('quickResultArea').style.display = 'none';

            // Remover toast de processamento se existir
            if (currentProcessingToast) {
                toastr.clear(currentProcessingToast);
                currentProcessingToast = null;
            }
        }

        async function classifyDocument() {
            if (!selectedFile) {
                toastManager.warning('Arquivo Necessário', 'Selecione um arquivo ZIP primeiro');
                return;
            }

            if (!selectedFile.name.toLowerCase().endsWith('.zip')) {
                toastManager.error('Formato Inválido', 'Apenas arquivos ZIP são aceitos');
                return;
            }

            // Marcar como processando
            isProcessing = true;

            // Mostrar loading visual na página
            document.getElementById('actionButtons').style.display = 'none';
            document.getElementById('loadingArea').style.display = 'block';

            // Mostrar toast de processamento
            currentProcessingToast = toastManager.processingBatch(selectedFile.name);

            try {
                // Preparar dados para envio
                const formData = new FormData();
                formData.append('arquivo', selectedFile);
                formData.append('metodo', 'visual');

                // Token anti-forgery
                const token = document.querySelector('#hiddenForm input[name="__RequestVerificationToken"]').value;
                formData.append('__RequestVerificationToken', token);

                // Fazer requisição AJAX
                const response = await fetch('@Url.Action("Upload", "Classificacao")', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                const result = await response.json();

                // Remover toast de processamento
                if (currentProcessingToast) {
                    toastManager.remove(currentProcessingToast);
                    currentProcessingToast = null;
                }

                if (result.success) {
                    // Sucesso - mostrar toast e resultado na página
                    toastManager.batchSuccess(result);
                    showQuickResult(result);

                    // Ocultar loading
                    document.getElementById('loadingArea').style.display = 'none';
                } else {
                    // Erro
                    toastManager.batchError(result.message || result.error || 'Erro desconhecido');
                    restoreUploadState();
                }

            } catch (error) {
                console.error('Erro na classificação:', error);

                // Remover toast de processamento
                if (currentProcessingToast) {
                    toastManager.remove(currentProcessingToast);
                    currentProcessingToast = null;
                }

                toastManager.error(
                    'Erro de Conexão',
                    'Falha ao comunicar com o servidor. Verifique sua conexão e tente novamente.'
                );
                restoreUploadState();
            }
        }

        function showQuickResult(data) {
            const quickResultContent = document.getElementById('quickResultContent');
            const quickResultArea = document.getElementById('quickResultArea');
            const viewFullReportBtn = document.getElementById('viewFullReportBtn');

            quickResultContent.innerHTML = `
                    <div class="row text-center">
                        <div class="col-md-3">
                            <strong class="text-primary fs-4">${data.totalDocuments}</strong>
                            <div class="small text-muted">Total de Documentos</div>
                        </div>
                        <div class="col-md-3">
                            <strong class="text-success fs-4">${data.successfulDocuments}</strong>
                            <div class="small text-muted">Classificados</div>
                        </div>
                        <div class="col-md-3">
                            <strong class="text-info fs-4">${data.successRate}%</strong>
                            <div class="small text-muted">Taxa de Sucesso</div>
                        </div>
                        <div class="col-md-3">
                            <strong class="text-warning fs-4">${data.averageConfidence}%</strong>
                            <div class="small text-muted">Confiança Média</div>
                        </div>
                    </div>
                    ${data.predominantType ? `
                    <div class="mt-3 text-center">
                        <span class="badge bg-primary fs-6">Tipo Predominante: ${data.predominantType}</span>
                    </div>
                    ` : ''}
                `;

            // Configurar botão para ver relatório completo
            if (data.redirectUrl) {
                viewFullReportBtn.onclick = () => {
                    window.location.href = data.redirectUrl;
                };
            }

            quickResultArea.style.display = 'block';
            isProcessing = false; // Permitir nova operação
        }

        function restoreUploadState() {
            isProcessing = false;
            document.getElementById('loadingArea').style.display = 'none';
            document.getElementById('actionButtons').style.display = 'block';
        }

        function classifyAnother() {
            forceClearFile();
        }

        // Integração com sistema legado de alertas (agora usando Toastr)
        function showAlert(message, type, title = '') {
            showToast[type] ? showToast[type](title, message) : showToast.info(title, message);
        }
    </script>
}
