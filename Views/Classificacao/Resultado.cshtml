@model ClassificadorDoc.Controllers.Mvc.ResultadoClassificacaoView
@{
    ViewData["Title"] = "Resultado da Classificação";
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Resultado da Classificação</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <a asp-action="Upload" class="btn btn-sm btn-outline-secondary">
                <i class="fas fa-plus"></i> Nova Classificação
            </a>
            <a asp-action="Historico" class="btn btn-sm btn-outline-primary">
                <i class="fas fa-history"></i> Ver Histórico
            </a>
        </div>
    </div>
</div>

@if (Model.Sucesso)
{
    <div class="alert alert-success" role="alert">
        <i class="fas fa-check-circle"></i>
        <strong>Classificação concluída com sucesso!</strong>
        Processados @Model.TotalDocumentos documento(s) usando método @Model.Metodo.
    </div>
}
else
{
    <div class="alert alert-warning" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        <strong>Classificação concluída com problemas.</strong>
        Alguns documentos podem não ter sido processados corretamente.
    </div>
}

<div class="row">
    <div class="col-12">
        <!-- Resumo dos Resultados -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Resumo dos Resultados</h6>
            </div>
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-number text-primary">@Model.TotalDocumentos</div>
                            <div class="stat-label">Total de Documentos</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-number text-success">@Model.Documentos.Count(d => d.ProcessadoComSucesso)</div>
                            <div class="stat-label">Processados com Sucesso</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-number text-danger">@Model.Documentos.Count(d => !d.ProcessadoComSucesso)</div>
                            <div class="stat-label">Com Erro</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card">
                            <div class="stat-number text-info">@Model.Metodo.ToUpper()</div>
                            <div class="stat-label">Método Utilizado</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Detalhes por Documento -->
        <div class="card shadow">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">Detalhes por Documento</h6>
                <div class="btn-group btn-group-sm">
                    <button type="button" class="btn btn-outline-success" onclick="exportarCSV()">
                        <i class="fas fa-file-csv"></i> CSV
                    </button>
                    <button type="button" class="btn btn-outline-danger" onclick="exportarPDF()">
                        <i class="fas fa-file-pdf"></i> PDF
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Arquivo</th>
                                <th>Tipo Classificado</th>
                                <th>Confiança</th>
                                <th>Status</th>
                                <th>Resumo</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var documento in Model.Documentos)
                            {
                                <tr class="@(documento.ProcessadoComSucesso ? "" : "table-warning")">
                                    <td>
                                        <i class="@GetFileIcon(documento.NomeArquivo) me-2"></i>
                                        <strong>@documento.NomeArquivo</strong>
                                    </td>
                                    <td>
                                        <span class="badge @GetBadgeClass(documento.TipoDocumento) fs-7">
                                            @GetTipoDisplayName(documento.TipoDocumento)
                                        </span>
                                    </td>
                                    <td>
                                        @if (documento.ProcessadoComSucesso)
                                        {
                                            <div class="progress" style="height: 20px;">
                                                <div class="progress-bar @GetConfidenceClass(documento.ConfiancaClassificacao)" 
                                                     role="progressbar" 
                                                     style="width: @(documento.ConfiancaClassificacao * 100)%"
                                                     aria-valuenow="@(documento.ConfiancaClassificacao * 100)" 
                                                     aria-valuemin="0" 
                                                     aria-valuemax="100">
                                                    @(Math.Round(documento.ConfiancaClassificacao * 100, 1))%
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">N/A</span>
                                        }
                                    </td>
                                    <td>
                                        @if (documento.ProcessadoComSucesso)
                                        {
                                            <span class="badge bg-success">
                                                <i class="fas fa-check"></i> Sucesso
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">
                                                <i class="fas fa-times"></i> Erro
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        <small class="text-muted">
                                            @if (documento.ProcessadoComSucesso)
                                            {
                                                @(documento.ResumoConteudo?.Length > 100 ? 
                                                    documento.ResumoConteudo.Substring(0, 100) + "..." : 
                                                    documento.ResumoConteudo)
                                            }
                                            else
                                            {
                                                @documento.ErroProcessamento
                                            }
                                        </small>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button type="button" class="btn btn-outline-primary" 
                                                    onclick="verDetalhes('@documento.NomeArquivo')"
                                                    title="Ver Detalhes">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            @if (documento.ProcessadoComSucesso)
                                            {
                                                <button type="button" class="btn btn-outline-success" 
                                                        onclick="salvarDocumento('@documento.NomeArquivo')"
                                                        title="Salvar">
                                                    <i class="fas fa-save"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para detalhes do documento -->
<div class="modal fade" id="detalhesModal" tabindex="-1" aria-labelledby="detalhesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detalhesModalLabel">Detalhes do Documento</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="detalhesConteudo">
                    <!-- Conteúdo será carregado via JavaScript -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .stat-card {
            padding: 20px;
            text-align: center;
        }
        
        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .stat-label {
            font-size: 0.9rem;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .progress {
            border-radius: 10px;
        }
        
        .progress-bar {
            font-size: 12px;
            line-height: 20px;
        }
    </style>
}

@section Scripts {
    <script>
        function verDetalhes(nomeArquivo) {
            // Buscar detalhes do documento e exibir no modal
            const documento = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Documentos));
            const doc = documento.find(d => d.nomeArquivo === nomeArquivo);
            
            if (doc) {
                const modalContent = `
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Informações Básicas</h6>
                            <p><strong>Nome:</strong> ${doc.nomeArquivo}</p>
                            <p><strong>Tipo:</strong> ${doc.tipoDocumento}</p>
                            <p><strong>Confiança:</strong> ${(doc.confiancaClassificacao * 100).toFixed(1)}%</p>
                            <p><strong>Status:</strong> ${doc.processadoComSucesso ? 'Sucesso' : 'Erro'}</p>
                        </div>
                        <div class="col-md-6">
                            <h6>Palavras-chave</h6>
                            <p>${doc.palavrasChaveEncontradas || 'Não encontradas'}</p>
                        </div>
                    </div>
                    <hr>
                    <h6>Resumo do Conteúdo</h6>
                    <p>${doc.resumoConteudo || 'Não disponível'}</p>
                    ${doc.textoExtraido ? `
                        <hr>
                        <h6>Texto Extraído (primeiros 500 caracteres)</h6>
                        <div class="bg-light p-3 rounded">
                            <small>${doc.textoExtraido.substring(0, 500)}${doc.textoExtraido.length > 500 ? '...' : ''}</small>
                        </div>
                    ` : ''}
                `;
                
                document.getElementById('detalhesConteudo').innerHTML = modalContent;
                document.getElementById('detalhesModalLabel').textContent = `Detalhes: ${nomeArquivo}`;
                
                const modal = new bootstrap.Modal(document.getElementById('detalhesModal'));
                modal.show();
            }
        }

        function salvarDocumento(nomeArquivo) {
            showAlert(`Documento ${nomeArquivo} salvo com sucesso!`, 'success');
        }

        function exportarCSV() {
            showAlert('Exportação para CSV em desenvolvimento', 'info');
        }

        function exportarPDF() {
            showAlert('Exportação para PDF em desenvolvimento', 'info');
        }

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            const container = document.querySelector('.container-fluid');
            container.insertBefore(alertDiv, container.firstChild);
            
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }
    </script>
}

@functions {
    private string GetFileIcon(string fileName)
    {
        var extension = System.IO.Path.GetExtension(fileName).ToLowerInvariant();
        return extension switch
        {
            ".pdf" => "fas fa-file-pdf text-danger",
            ".zip" => "fas fa-file-archive text-warning",
            ".doc" => "fas fa-file-word text-primary",
            ".docx" => "fas fa-file-word text-primary",
            ".txt" => "fas fa-file-alt text-secondary",
            _ => "fas fa-file text-secondary"
        };
    }

    private string GetBadgeClass(string tipo)
    {
        return tipo switch
        {
            "autuacao" => "bg-danger",
            "defesa" => "bg-primary", 
            "notificacao_penalidade" => "bg-warning text-dark",
            "notificacao_autuacao" => "bg-info text-dark",
            "outros" => "bg-secondary",
            "erro" => "bg-dark",
            _ => "bg-light text-dark"
        };
    }

    private string GetTipoDisplayName(string tipo)
    {
        return tipo switch
        {
            "autuacao" => "Autuação",
            "defesa" => "Defesa",
            "notificacao_penalidade" => "Notificação de Penalidade",
            "notificacao_autuacao" => "Notificação de Autuação",
            "outros" => "Outros",
            "erro" => "Erro",
            _ => tipo.ToUpperInvariant()
        };
    }

    private string GetConfidenceClass(double confianca)
    {
        if (confianca >= 0.9) return "bg-success";
        if (confianca >= 0.7) return "bg-warning";
        return "bg-danger";
    }
}
