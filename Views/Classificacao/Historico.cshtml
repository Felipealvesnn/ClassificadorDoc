@model X.PagedList.IPagedList<ClassificadorDoc.Controllers.Mvc.HistoricoLoteView>
@using X.PagedList.Mvc.Core;
@{
    ViewData["Title"] = "Histórico de Lotes";
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Histórico de Lotes de Documentos</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <a asp-action="Upload" class="btn btn-sm btn-primary">
                <i class="fas fa-upload"></i> Novo Lote
            </a>
            <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle dropdown-toggle-split"
                data-bs-toggle="dropdown">
                <span class="visually-hidden">Toggle Dropdown</span>
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#" onclick="exportarCSV()">
                        <i class="fas fa-file-csv"></i> Exportar CSV
                    </a></li>
                <li><a class="dropdown-item" href="#" onclick="exportarPDF()">
                        <i class="fas fa-file-pdf"></i> Exportar PDF
                    </a></li>
            </ul>
        </div>
    </div>
</div>

<!-- Filtros -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" action="@Url.Action("Historico")" class="row g-3">
            <div class="col-md-3">
                <label for="status" class="form-label">Status do Lote</label>
                <select class="form-select" id="status" name="status">
                    <option value="">Todos os status</option>
                    <option value="Completed" selected="@(ViewBag.StatusFiltro == "Completed")">Concluído</option>
                    <option value="Failed" selected="@(ViewBag.StatusFiltro == "Failed")">Falhou</option>
                    <option value="Processing" selected="@(ViewBag.StatusFiltro == "Processing")">Processando</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="tipo" class="form-label">Tipo Predominante</label>
                <select class="form-select" id="tipo" name="tipo">
                    <option value="">Todos os tipos</option>
                    <option value="autuacao" selected="@(ViewBag.TipoFiltro == "autuacao")">Autuação</option>
                    <option value="defesa" selected="@(ViewBag.TipoFiltro == "defesa")">Defesa</option>
                    <option value="notificacao_penalidade" selected="@(ViewBag.TipoFiltro == "notificacao_penalidade")">Notificação de Penalidade</option>
                    <option value="outros" selected="@(ViewBag.TipoFiltro == "outros")">Outros</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="dataInicio" class="form-label">Data Início</label>
                <input type="date" class="form-control" id="dataInicio" name="dataInicio" value="@ViewBag.DataInicioFiltro">
            </div>
            <div class="col-md-3">
                <label for="dataFim" class="form-label">Data Fim</label>
                <input type="date" class="form-control" id="dataFim" name="dataFim" value="@ViewBag.DataFimFiltro">
            </div>
            <div class="col-md-3">
                <label for="confiancaMinima" class="form-label">Confiança Mínima</label>
                <select class="form-select" id="confiancaMinima" name="confiancaMinima">
                    <option value="">Qualquer</option>
                    <option value="90" selected="@(ViewBag.ConfiancaFiltro?.ToString() == "90")">90% ou mais</option>
                    <option value="80" selected="@(ViewBag.ConfiancaFiltro?.ToString() == "80")">80% ou mais</option>
                    <option value="70" selected="@(ViewBag.ConfiancaFiltro?.ToString() == "70")">70% ou mais</option>
                </select>
            </div>
            <div class="col-12">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-filter"></i> Aplicar Filtros
                </button>
                <a href="@Url.Action("Historico")" class="btn btn-outline-secondary">
                    <i class="fas fa-times"></i> Limpar
                </a>
            </div>
        </form>
    </div>
</div>

<!-- Resumo -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-archive fa-2x text-primary mb-2"></i>
                <h5 class="card-title">@Model.Count</h5>
                <p class="card-text text-muted">Total de Lotes</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-file-alt fa-2x text-info mb-2"></i>
                <h5 class="card-title">@Model.Sum(m => m.TotalDocumentos)</h5>
                <p class="card-text text-muted">Total de Documentos</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                <h5 class="card-title">@(Model.Any() ? Model.Average(m => m.ConfiancaMedia * 100).ToString("F1") : "0")%</h5>
                <p class="card-text text-muted">Confiança Média</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-clock fa-2x text-warning mb-2"></i>
                <h5 class="card-title">@(Model.Any() ? Model.Max(m => m.DataProcessamento).ToString("dd/MM") : "N/A")</h5>
                <p class="card-text text-muted">Último Processamento</p>
            </div>
        </div>
    </div>
</div>

<!-- Lista de Lotes -->
<div class="card shadow">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Lotes Processados</h6>
    </div>
    <div class="card-body">
        @if (Model.Any())
        {
            <div class="row">
                @foreach (var lote in Model.OrderByDescending(m => m.DataProcessamento))
                {
                    <div class="col-lg-6 col-xl-4 mb-4">
                        <div class="card h-100 border-left-@GetStatusColor(lote.Status)">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <h6 class="card-title text-truncate" style="max-width: 200px;" title="@lote.NomeLote">
                                        <i class="fas fa-archive me-2"></i>@lote.NomeLote
                                    </h6>
                                    <span class="badge @GetStatusBadgeClass(lote.Status)">@GetStatusDisplayName(lote.Status)</span>
                                </div>
                                
                                <div class="row text-center mb-3">
                                    <div class="col-4">
                                        <div class="h6 mb-0 text-primary">@lote.TotalDocumentos</div>
                                        <small class="text-muted">Docs</small>
                                    </div>
                                    <div class="col-4">
                                        <div class="h6 mb-0 text-success">@lote.DocumentosSucesso</div>
                                        <small class="text-muted">Sucesso</small>
                                    </div>
                                    <div class="col-4">
                                        <div class="h6 mb-0 text-info">@lote.TaxaSucesso%</div>
                                        <small class="text-muted">Taxa</small>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(lote.TipoPredominante))
                                {
                                    <div class="text-center mb-2">
                                        <span class="badge @GetTipoBadgeClass(lote.TipoPredominante) fs-6">
                                            @GetTipoDisplayName(lote.TipoPredominante)
                                        </span>
                                    </div>
                                }

                                <div class="text-muted small mb-3">
                                    <div><i class="fas fa-calendar me-1"></i>@lote.DataProcessamento.ToString("dd/MM/yyyy HH:mm")</div>
                                    <div><i class="fas fa-clock me-1"></i>@lote.TempoFormatado</div>
                                    <div><i class="fas fa-file-archive me-1"></i>@lote.TamanhoFormatado</div>
                                    <div><i class="fas fa-chart-line me-1"></i>@((lote.ConfiancaMedia * 100).ToString("F1"))% confiança</div>
                                    <div><i class="fas fa-user me-1"></i>@lote.NomeUsuario</div>
                                </div>

                                <div class="d-grid">
                                    <a asp-action="DetalhesLote" asp-route-id="@lote.BatchId" class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-eye me-1"></i>Ver Documentos (@lote.TotalDocumentos)
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Paginação Bootstrap Moderna -->
            @if (Model.PageCount > 1)
            {
                <div class="d-flex justify-content-center mt-5 mb-4">
                    <nav aria-label="Navegação de páginas">
                        @Html.PagedListPager(Model, page => Url.Action("Historico", new { 
                            pagina = page, 
                            status = ViewBag.StatusFiltro, 
                            tipo = ViewBag.TipoFiltro, 
                            dataInicio = ViewBag.DataInicioFiltro, 
                            dataFim = ViewBag.DataFimFiltro, 
                            confiancaMinima = ViewBag.ConfiancaFiltro 
                        }), new X.PagedList.Mvc.Core.PagedListRenderOptions
                        {
                            UlElementClasses = new string[] { "pagination", "pagination-lg" },
                            LiElementClasses = new string[] { "page-item" },
                            PageClasses = new string[] { "page-link" },
                            MaximumPageNumbersToDisplay = 5,
                            DisplayLinkToFirstPage = X.PagedList.Mvc.Core.PagedListDisplayMode.Never,
                            DisplayLinkToLastPage = X.PagedList.Mvc.Core.PagedListDisplayMode.Never,
                            DisplayLinkToPreviousPage = X.PagedList.Mvc.Core.PagedListDisplayMode.IfNeeded,
                            DisplayLinkToNextPage = X.PagedList.Mvc.Core.PagedListDisplayMode.IfNeeded,
                            LinkToPreviousPageFormat = "‹ Anterior",
                            LinkToNextPageFormat = "Próximo ›",
                            DisplayEllipsesWhenNotShowingAllPageNumbers = true,
                            EllipsesFormat = "…"
                        })
                    </nav>
                </div>

                <!-- Informações da paginação clean -->
                <div class="text-center mb-4">
                    <small class="text-muted fw-light">
                        @Model.FirstItemOnPage–@Model.LastItemOnPage de @Model.TotalItemCount lotes
                        • Página @Model.PageNumber de @Model.PageCount
                    </small>
                </div>
            }
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-archive fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">Nenhum lote encontrado</h5>
                <p class="text-muted">Você ainda não processou nenhum lote de documentos.</p>
                <a asp-action="Upload" class="btn btn-primary">
                    <i class="fas fa-upload"></i> Processar Primeiro Lote
                </a>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function exportarCSV() {
            window.location.href = '@Url.Action("ExportarCSV", "Classificacao")';
        }

        function exportarPDF() {
            window.location.href = '@Url.Action("ExportarPDF", "Classificacao")';
        }

        // Adicionar indicador visual quando há filtros ativos
        document.addEventListener('DOMContentLoaded', function() {
            const hasFilters = '@ViewBag.StatusFiltro' || '@ViewBag.TipoFiltro' || '@ViewBag.DataInicioFiltro' || '@ViewBag.DataFimFiltro' || '@ViewBag.ConfiancaFiltro';
            
            if (hasFilters) {
                const filterCard = document.querySelector('.card.mb-4');
                filterCard.classList.add('border-primary');
                filterCard.querySelector('.card-body').insertAdjacentHTML('afterbegin', 
                    '<div class="alert alert-info alert-sm mb-3">' +
                    '<i class="fas fa-info-circle"></i> Filtros ativos - <a href="@Url.Action("Historico")" class="alert-link">Limpar todos</a>' +
                    '</div>'
                );
            }
        });
    </script>
}

@section Styles {
    <style>
        /* Refinamentos sutis na paginação Bootstrap */
        .pagination-lg .page-link {
            padding: 0.75rem 1rem;
            border-radius: 0.375rem;
            border: none;
            margin: 0 0.125rem;
            color: #6c757d;
            background: #f8f9fa;
            transition: all 0.15s ease-in-out;
        }
        
        .pagination-lg .page-item.active .page-link {
            background: #0d6efd;
            color: white;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }
        
        .pagination-lg .page-link:hover:not(.active) {
            background: #e9ecef;
            color: #495057;
            transform: translateY(-1px);
        }
        
        .pagination-lg .page-item.disabled .page-link {
            background: #f8f9fa;
            color: #adb5bd;
        }
    </style>

    <style>
        /* Modern Pagination Styles */
        .pagination-modern {
            --pagination-radius: 12px;
            --pagination-spacing: 4px;
            --pagination-height: 44px;
            --pagination-font-size: 14px;
            --primary-color: #6366f1;
            --primary-hover: #4f46e5;
            --gray-50: #f9fafb;
            --gray-100: #f3f4f6;
            --gray-300: #d1d5db;
            --gray-500: #6b7280;
            --gray-700: #374151;
            --gray-900: #111827;
        }

        .pagination-modern-list {
            gap: var(--pagination-spacing);
            margin: 0;
            padding: 0;
        }

        .pagination-modern-list .page-item {
            margin: 0;
        }

        .pagination-modern-link {
            min-width: var(--pagination-height);
            height: var(--pagination-height);
            border: 1px solid transparent;
            border-radius: var(--pagination-radius);
            color: var(--gray-700);
            font-size: var(--pagination-font-size);
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: center;
            text-decoration: none;
            background: white;
            transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            position: relative;
            overflow: hidden;
        }

        .pagination-modern-link:hover {
            color: var(--primary-color);
            background: var(--gray-50);
            border-color: var(--gray-300);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            transform: translateY(-1px);
        }

        .pagination-modern-list .page-item.active .pagination-modern-link {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
            box-shadow: 0 4px 14px 0 rgba(99, 102, 241, 0.3);
            font-weight: 600;
        }

        .pagination-modern-list .page-item.active .pagination-modern-link:hover {
            background: var(--primary-hover);
            border-color: var(--primary-hover);
            transform: translateY(-1px);
            box-shadow: 0 6px 20px 0 rgba(99, 102, 241, 0.4);
        }

        .pagination-modern-list .page-item.disabled .pagination-modern-link {
            color: var(--gray-300);
            background: var(--gray-100);
            border-color: transparent;
            cursor: not-allowed;
            box-shadow: none;
        }

        .pagination-modern-list .page-item.disabled .pagination-modern-link:hover {
            transform: none;
            box-shadow: none;
        }

        /* Efeito ripple para botões ativos */
        .pagination-modern-link::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.3);
            transform: translate(-50%, -50%);
            transition: width 0.3s, height 0.3s;
        }

        .pagination-modern-list .page-item.active .pagination-modern-link:active::before {
            width: 30px;
            height: 30px;
        }

        /* Informações da paginação modernas */
        .pagination-info-modern {
            margin-top: 24px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .pagination-stats {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
            margin-bottom: 8px;
            font-size: 14px;
            color: var(--gray-700);
        }

        .pagination-stats .current-items {
            font-weight: 600;
            color: var(--primary-color);
        }

        .pagination-stats .separator {
            color: var(--gray-500);
        }

        .pagination-stats .total-items {
            font-weight: 600;
            color: var(--gray-900);
        }

        .pagination-stats .item-type {
            color: var(--gray-500);
        }

        .pagination-pages {
            font-size: 12px;
            color: var(--gray-500);
            font-weight: 500;
            letter-spacing: 0.025em;
        }

        /* Responsividade */
        @@media (max-width: 640px) {
            .pagination-modern {
                --pagination-height: 40px;
                --pagination-font-size: 13px;
                --pagination-spacing: 2px;
            }

            .pagination-modern-list {
                flex-wrap: wrap;
                justify-content: center;
            }

            .pagination-stats {
                flex-direction: column;
                gap: 2px;
            }

            .pagination-info-modern {
                margin-top: 16px;
            }
        }

        /* Dark mode support */
        @@media (prefers-color-scheme: dark) {
            .pagination-modern {
                --gray-50: #1f2937;
                --gray-100: #374151;
                --gray-300: #6b7280;
                --gray-500: #9ca3af;
                --gray-700: #d1d5db;
                --gray-900: #f9fafb;
            }

            .pagination-modern-link {
                background: #1f2937;
                border-color: #374151;
            }
        }

        /* Animação de entrada */
        .pagination-modern {
            animation: fadeInUp 0.3s ease-out;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
}

@functions {
    private static string GetStatusColor(string status)
    {
        return status switch
        {
            "Completed" => "success",
            "Failed" => "danger",
            "Processing" => "warning",
            _ => "secondary"
        };
    }

    private static string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Completed" => "bg-success",
            "Failed" => "bg-danger",
            "Processing" => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }

    private static string GetStatusDisplayName(string status)
    {
        return status switch
        {
            "Completed" => "Concluído",
            "Failed" => "Falhou",
            "Processing" => "Processando",
            _ => "Desconhecido"
        };
    }

    private static string GetTipoBadgeClass(string? tipo)
    {
        return tipo switch
        {
            "autuacao" => "bg-danger",
            "defesa" => "bg-primary",
            "notificacao_penalidade" => "bg-warning text-dark",
            "outros" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private static string GetTipoDisplayName(string? tipo)
    {
        return tipo switch
        {
            "autuacao" => "Autuação",
            "defesa" => "Defesa",
            "notificacao_penalidade" => "Notificação de Penalidade",
            "outros" => "Outros",
            _ => "Não Identificado"
        };
    }

    private string GetProgressBarClass(decimal confianca)
    {
        return confianca switch
        {
            >= 0.9m => "bg-success",
            >= 0.7m => "bg-warning",
            _ => "bg-danger"
        };
    }
}
