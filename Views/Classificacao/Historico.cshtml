@model List<ClassificadorDoc.Controllers.Mvc.HistoricoClassificacao>
@using System.IO
@{
    ViewData["Title"] = "Histórico de Classificações";
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Histórico de Classificações</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <a asp-action="Upload" class="btn btn-sm btn-primary">
                <i class="fas fa-upload"></i> Nova Classificação
            </a>
            <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle dropdown-toggle-split"
                data-bs-toggle="dropdown">
                <span class="visually-hidden">Toggle Dropdown</span>
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#" onclick="exportarCSV()">
                        <i class="fas fa-file-csv"></i> Exportar CSV
                    </a></li>
                <li><a class="dropdown-item" href="#" onclick="exportarPDF()">
                        <i class="fas fa-file-pdf"></i> Exportar PDF
                    </a></li>
            </ul>
        </div>
    </div>
</div>

<!-- Filtros -->
<div class="card mb-4">
    <div class="card-body">
        <form class="row g-3">
            <div class="col-md-3">
                <label for="filtroTipo" class="form-label">Tipo de Documento</label>
                <select class="form-select" id="filtroTipo">
                    <option value="">Todos os tipos</option>
                    <option value="autuacao">Autuação</option>
                    <option value="defesa">Defesa</option>
                    <option value="notificacao_penalidade">Notificação de Penalidade</option>
                    <option value="outros">Outros</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="filtroDataInicio" class="form-label">Data Início</label>
                <input type="date" class="form-control" id="filtroDataInicio">
            </div>
            <div class="col-md-3">
                <label for="filtroDataFim" class="form-label">Data Fim</label>
                <input type="date" class="form-control" id="filtroDataFim">
            </div>
            <div class="col-md-3">
                <label for="filtroConfianca" class="form-label">Confiança Mínima</label>
                <select class="form-select" id="filtroConfianca">
                    <option value="">Qualquer</option>
                    <option value="90">90% ou mais</option>
                    <option value="80">80% ou mais</option>
                    <option value="70">70% ou mais</option>
                </select>
            </div>
            <div class="col-12">
                <button type="button" class="btn btn-primary" onclick="aplicarFiltros()">
                    <i class="fas fa-filter"></i> Aplicar Filtros
                </button>
                <button type="button" class="btn btn-outline-secondary" onclick="limparFiltros()">
                    <i class="fas fa-times"></i> Limpar
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Resumo -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-file-alt fa-2x text-primary mb-2"></i>
                <h5 class="card-title">@Model.Count</h5>
                <p class="card-text text-muted">Total de Documentos</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                <h5 class="card-title">@Model.Count(m => m.Confianca >= 0.9m)</h5>
                <p class="card-text text-muted">Alta Confiança (90%+)</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-chart-line fa-2x text-info mb-2"></i>
                <h5 class="card-title">@((Model.Any() ? Model.Average(m => (double)m.Confianca) * 100 :
                                        0).ToString("F1"))%</h5>
                <p class="card-text text-muted">Confiança Média</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-clock fa-2x text-warning mb-2"></i>
                <h5 class="card-title">@(Model.Any() ? Model.Max(m => m.DataClassificacao).ToString("dd/MM") : "N/A")
                </h5>
                <p class="card-text text-muted">Último Processamento</p>
            </div>
        </div>
    </div>
</div>

<!-- Tabela de Histórico -->
<div class="card shadow">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Classificações Realizadas</h6>
    </div>
    <div class="card-body">
        @if (Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover" id="tabelaHistorico">
                    <thead class="table-light">
                        <tr>
                            <th>Arquivo</th>
                            <th>Tipo Classificado</th>
                            <th>Confiança</th>
                            <th>Data/Hora</th>
                            <th>Usuário</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.OrderByDescending(m => m.DataClassificacao))
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="fas @GetFileIcon(item.NomeArquivo) me-2"></i>
                                        <div>
                                            <div class="fw-bold">@item.NomeArquivo</div>
                                            <small class="text-muted">ID: @item.Id</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge @GetBadgeClass(item.TipoClassificado)">
                                        @GetTipoDisplayName(item.TipoClassificado)
                                    </span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="me-2" style="width: 60px;">
                                            <div class="progress" style="height: 8px;">
                                                <div class="progress-bar @GetProgressBarClass(item.Confianca)"
                                                    style="width: @((item.Confianca * 100).ToString("F0"))%"></div>
                                            </div>
                                        </div>
                                        <small class="fw-bold">@((item.Confianca * 100).ToString("F1"))%</small>
                                    </div>
                                </td>
                                <td>
                                    <div>@item.DataClassificacao.ToString("dd/MM/yyyy")</div>
                                    <small class="text-muted">@item.DataClassificacao.ToString("HH:mm")</small>
                                </td>
                                <td>@item.Usuario</td>
                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <button type="button" class="btn btn-outline-primary btn-sm"
                                            onclick="verDetalhes(@item.Id)" title="Ver Detalhes">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-success btn-sm"
                                            onclick="baixarResultado(@item.Id)" title="Baixar Resultado">
                                            <i class="fas fa-download"></i>
                                        </button>
                                        @if (User.IsInRole("Administrator"))
                                        {
                                            <button type="button" class="btn btn-outline-danger btn-sm"
                                                onclick="excluirItem(@item.Id)" title="Excluir">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">Nenhuma classificação encontrada</h5>
                <p class="text-muted">Comece fazendo upload de um documento para classificação.</p>
                <a asp-action="Upload" class="btn btn-primary">
                    <i class="fas fa-upload"></i> Classificar Primeiro Documento
                </a>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function aplicarFiltros() {
            // Implementar lógica de filtros
            const tipo = document.getElementById('filtroTipo').value;
            const dataInicio = document.getElementById('filtroDataInicio').value;
            const dataFim = document.getElementById('filtroDataFim').value;
            const confianca = document.getElementById('filtroConfianca').value;

            // Por enquanto, apenas mostrar alerta
            console.log('Filtros:', { tipo, dataInicio, dataFim, confianca });
            alert('Filtros aplicados! (Funcionalidade em desenvolvimento)');
        }

        function limparFiltros() {
            document.getElementById('filtroTipo').value = '';
            document.getElementById('filtroDataInicio').value = '';
            document.getElementById('filtroDataFim').value = '';
            document.getElementById('filtroConfianca').value = '';
        }

        function verDetalhes(id) {
            alert(`Ver detalhes do item ${id} (Em desenvolvimento)`);
        }

        function baixarResultado(id) {
            alert(`Baixar resultado do item ${id} (Em desenvolvimento)`);
        }

        function excluirItem(id) {
            if (confirm('Tem certeza que deseja excluir este item?')) {
                alert(`Excluir item ${id} (Em desenvolvimento)`);
            }
        }

        function exportarCSV() {
            alert('Exportar CSV (Em desenvolvimento)');
        }

        function exportarPDF() {
            alert('Exportar PDF (Em desenvolvimento)');
        }
    </script>
}

@functions {
    private string GetFileIcon(string fileName)
    {
        var extension = System.IO.Path.GetExtension(fileName).ToLowerInvariant();
        return extension switch
        {
            ".pdf" => "fa-file-pdf text-danger",
            ".zip" => "fa-file-archive text-warning",
            _ => "fa-file text-secondary"
        };
    }

    private string GetBadgeClass(string tipo)
    {
        return tipo switch
        {
            "autuacao" => "bg-danger",
            "defesa" => "bg-primary",
            "notificacao_penalidade" => "bg-warning",
            "outros" => "bg-secondary",
            _ => "bg-light text-dark"
        };
    }

    private string GetTipoDisplayName(string tipo)
    {
        return tipo switch
        {
            "autuacao" => "Autuação",
            "defesa" => "Defesa",
            "notificacao_penalidade" => "Notificação de Penalidade",
            "outros" => "Outros",
            _ => tipo
        };
    }

    private string GetProgressBarClass(decimal confianca)
    {
        return confianca switch
        {
            >= 0.9m => "bg-success",
            >= 0.7m => "bg-warning",
            _ => "bg-danger"
        };
    }
}
