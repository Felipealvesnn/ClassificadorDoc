@{
    ViewData["Title"] = "Gráficos Estatísticos Avançados";
}

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">
        <i class="fas fa-chart-bar me-2 text-primary"></i>Análise Estatística Interativa
    </h1>
    <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group me-2">
            <button type="button" class="btn btn-sm btn-outline-primary" onclick="exportarGraficos()">
                <i class="fas fa-download"></i> Exportar Gráficos
            </button>
            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="resetarFiltros()">
                <i class="fas fa-refresh"></i> Resetar
            </button>
        </div>
    </div>
</div>

<!-- Controles de Filtros -->
<div class="card mb-4">
    <div class="card-header">
        <h6 class="m-0 font-weight-bold text-primary">
            <i class="fas fa-filter me-2"></i>Filtros e Configurações
        </h6>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-3">
                <label for="dataInicio" class="form-label">Data Início</label>
                <input type="date" class="form-control" id="dataInicio"
                    value="@DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd")">
            </div>
            <div class="col-md-3">
                <label for="dataFim" class="form-label">Data Fim</label>
                <input type="date" class="form-control" id="dataFim" value="@DateTime.Now.ToString("yyyy-MM-dd")">
            </div>
            <div class="col-md-3">
                <label for="tipoGrafico" class="form-label">Tipo de Visualização</label>
                <select class="form-select" id="tipoGrafico" onchange="alterarTipoGrafico()">
                    <option value="line">Linha</option>
                    <option value="bar">Barras</option>
                    <option value="scatter">Dispersão</option>
                    <option value="bubble">Bolhas</option>
                    <option value="radar">Radar</option>
                    <option value="doughnut">Rosca</option>
                    <option value="polarArea">Área Polar</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="metrica" class="form-label">Métrica Principal</label>
                <select class="form-select" id="metrica" onchange="atualizarDados()">
                    <option value="documentos">Documentos Processados</option>
                    <option value="confianca">Confiança Média</option>
                    <option value="tempo">Tempo de Processamento</option>
                    <option value="usuarios">Usuários Ativos</option>
                    <option value="tipos">Tipos de Documento</option>
                    <option value="produtividade">Produtividade (Score)</option>
                    <option value="eficiencia">Eficiência (Docs/Hora)</option>
                </select>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-12">
                <button type="button" class="btn btn-primary" onclick="aplicarFiltros()">
                    <i class="fas fa-chart-line me-2"></i>Atualizar Gráficos
                </button>
                <button type="button" class="btn btn-outline-info" onclick="mostrarEstatisticas()">
                    <i class="fas fa-calculator me-2"></i>Estatísticas Descritivas
                </button>
                <button type="button" class="btn btn-outline-success" onclick="gerarRelatorio()">
                    <i class="fas fa-file-alt me-2"></i>Gerar Relatório
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Gráficos Principais -->
<div class="row">
    <!-- Gráfico Principal Interativo -->
    <div class="col-lg-8">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary" id="tituloGraficoPrincipal">
                    Evolução Temporal - Documentos Processados
                </h6>
                <div class="dropdown">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button"
                        data-bs-toggle="dropdown">
                        <i class="fas fa-cog"></i> Opções
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="toggleAnimacao()">
                                <i class="fas fa-play"></i> Toggle Animação
                            </a></li>
                        <li><a class="dropdown-item" href="#" onclick="alterarEscala()">
                                <i class="fas fa-expand-arrows-alt"></i> Escala Logarítmica
                            </a></li>
                        <li><a class="dropdown-item" href="#" onclick="mostrarTendencia()">
                                <i class="fas fa-chart-line"></i> Linha de Tendência
                            </a></li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li><a class="dropdown-item" href="#" onclick="exportarGrafico('principal')">
                                <i class="fas fa-download"></i> Exportar PNG
                            </a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body">
                <div style="position: relative; height: 400px;">
                    <canvas id="graficoPrincipal"></canvas>
                </div>
                <!-- Controles de Zoom -->
                <div class="mt-3 text-center">
                    <button class="btn btn-sm btn-outline-primary" onclick="resetZoom()">
                        <i class="fas fa-search-minus"></i> Reset Zoom
                    </button>
                    <button class="btn btn-sm btn-outline-info" onclick="togglePan()">
                        <i class="fas fa-hand-paper"></i> Pan/Zoom
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Gráfico de Distribuição -->
    <div class="col-lg-4">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-chart-pie me-2"></i>Distribuição por Categoria
                </h6>
            </div>
            <div class="card-body">
                <div style="position: relative; height: 300px;">
                    <canvas id="graficoDistribuicao"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Gráficos Estatísticos Avançados -->
<div class="row">
    <!-- Boxplot de Confiança -->
    <div class="col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-box me-2"></i>Análise de Distribuição - Confiança
                </h6>
            </div>
            <div class="card-body">
                <div style="position: relative; height: 300px;">
                    <canvas id="graficoBoxplot"></canvas>
                </div>
                <div class="mt-2">
                    <small class="text-muted">
                        <strong>Quartis:</strong>
                        Q1: <span id="q1">-</span> |
                        Mediana: <span id="mediana">-</span> |
                        Q3: <span id="q3">-</span>
                    </small>
                </div>
            </div>
        </div>
    </div>

    <!-- Heatmap de Correlação -->
    <div class="col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-th me-2"></i>Matriz de Correlação
                </h6>
            </div>
            <div class="card-body">
                <div style="position: relative; height: 300px;">
                    <canvas id="graficoHeatmap"></canvas>
                </div>
                <div class="mt-2">
                    <small class="text-muted">
                        Correlação entre métricas: processamento, confiança, tempo e usuários
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Card de Produtividade dos Usuários -->
<div class="row">
    <div class="col-12">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-users-cog me-2"></i>Análise de Produtividade dos Usuários
                </h6>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-4">
                        <div class="card bg-gradient-primary text-white">
                            <div class="card-body text-center">
                                <h4 id="totalUsuariosAtivos">-</h4>
                                <small>Usuários Ativos</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card bg-gradient-success text-white">
                            <div class="card-body text-center">
                                <h4 id="produtividadeMedia">-</h4>
                                <small>Score Médio</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card bg-gradient-info text-white">
                            <div class="card-body text-center">
                                <h4 id="eficienciaMedia">-</h4>
                                <small>Docs/Hora Média</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div style="position: relative; height: 350px;">
                    <canvas id="graficoProdutividade"></canvas>
                </div>

                <!-- Tabela de Detalhes dos Usuários -->
                <div class="mt-4">
                    <h6 class="text-primary mb-3">
                        <i class="fas fa-table me-2"></i>Detalhes por Usuário
                    </h6>
                    <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                        <table class="table table-sm table-striped" id="tabelaProdutividade">
                            <thead class="table-dark sticky-top">
                                <tr>
                                    <th>Usuário</th>
                                    <th>Score</th>
                                    <th>Eficiência</th>
                                    <th>Documentos</th>
                                    <th>Tempo Online</th>
                                </tr>
                            </thead>
                            <tbody id="corpoTabelaProdutividade">
                                <!-- Dados inseridos dinamicamente -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="mt-3 text-center">
                    <button class="btn btn-sm btn-outline-primary" onclick="alterarVisualizacaoProdutividade()">
                        <i class="fas fa-exchange-alt"></i> Alternar Visualização
                    </button>
                    <a href="@Url.Action("Produtividade", "Relatorios")" class="btn btn-sm btn-outline-success">
                        <i class="fas fa-chart-line"></i> Relatório Detalhado
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Análise de Séries Temporais -->
<div class="row">
    <div class="col-12">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-clock me-2"></i>Análise de Séries Temporais com Predição
                </h6>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label for="periodoPredicao" class="form-label">Período de Predição</label>
                        <select class="form-select" id="periodoPredicao" onchange="atualizarPredicao()">
                            <option value="7">7 dias</option>
                            <option value="15">15 dias</option>
                            <option value="30">30 dias</option>
                            <option value="60">60 dias</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="modeloPredicao" class="form-label">Modelo de Predição</label>
                        <select class="form-select" id="modeloPredicao" onchange="atualizarPredicao()">
                            <option value="linear">Regressão Linear</option>
                            <option value="moving_average">Média Móvel</option>
                            <option value="exponential">Suavização Exponencial</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <div class="mt-4">
                            <button class="btn btn-success" onclick="calcularPredicao()">
                                <i class="fas fa-crystal-ball me-2"></i>Calcular Predição
                            </button>
                        </div>
                    </div>
                </div>
                <div style="position: relative; height: 400px;">
                    <canvas id="graficoSeriesTempo"></canvas>
                </div>
                <div class="mt-3">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="card text-center bg-light">
                                <div class="card-body p-2">
                                    <h6 class="card-title mb-1">Tendência</h6>
                                    <p class="card-text mb-0">
                                        <span id="tendencia" class="fw-bold text-success">↑ Crescente</span>
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center bg-light">
                                <div class="card-body p-2">
                                    <h6 class="card-title mb-1">Sazonalidade</h6>
                                    <p class="card-text mb-0">
                                        <span id="sazonalidade" class="fw-bold text-info">Semanal</span>
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center bg-light">
                                <div class="card-body p-2">
                                    <h6 class="card-title mb-1">R²</h6>
                                    <p class="card-text mb-0">
                                        <span id="r2" class="fw-bold text-primary">0.85</span>
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center bg-light">
                                <div class="card-body p-2">
                                    <h6 class="card-title mb-1">Próx. Valor</h6>
                                    <p class="card-text mb-0">
                                        <span id="proximoValor" class="fw-bold text-warning">247</span>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Estatísticas Descritivas -->
<div class="modal fade" id="modalEstatisticas" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-calculator me-2"></i>Estatísticas Descritivas
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Medidas de Tendência Central</h6>
                        <table class="table table-sm">
                            <tr>
                                <td><strong>Média:</strong></td>
                                <td id="estatMedia">-</td>
                            </tr>
                            <tr>
                                <td><strong>Mediana:</strong></td>
                                <td id="estatMediana">-</td>
                            </tr>
                            <tr>
                                <td><strong>Moda:</strong></td>
                                <td id="estatModa">-</td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6>Medidas de Dispersão</h6>
                        <table class="table table-sm">
                            <tr>
                                <td><strong>Desvio Padrão:</strong></td>
                                <td id="estatDesvio">-</td>
                            </tr>
                            <tr>
                                <td><strong>Variância:</strong></td>
                                <td id="estatVariancia">-</td>
                            </tr>
                            <tr>
                                <td><strong>Amplitude:</strong></td>
                                <td id="estatAmplitude">-</td>
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <h6>Análise de Quartis</h6>
                        <div id="quartisInfo" class="alert alert-info">
                            <strong>Q1:</strong> <span id="estatQ1">-</span> |
                            <strong>Q2 (Mediana):</strong> <span id="estatQ2">-</span> |
                            <strong>Q3:</strong> <span id="estatQ3">-</span>
                            <br><small>IQR (Amplitude Interquartil): <span id="estatIQR">-</span></small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary" onclick="exportarEstatisticas()">
                    <i class="fas fa-download me-2"></i>Exportar
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Chart.js com plugins avançados -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script src="https://cdn.jsdelivr.net/npm/hammerjs"></script>

    <script>
        // Variáveis globais dos gráficos
        let graficoPrincipal = null;
        let graficoDistribuicao = null;
        let graficoBoxplot = null;
        let graficoHeatmap = null;
        let graficoSeriesTempo = null;
        let graficoProdutividade = null;

        // Dados carregados dinamicamente da API
        let dadosEstatisticos = {
            documentos: [],
            confianca: [],
            tempo: [],
            usuarios: [],
            labels: [],
            // Novos dados de produtividade
            produtividade: [],
            eficiencia: [],
            dadosProdutividade: {
                totalUsuarios: 0,
                scoremedio: 0,
                eficienciaMedia: 0,
                usuariosDetalhados: []
            }
        };

        document.addEventListener('DOMContentLoaded', function () {
            carregarDadosIniciais();

            // Event listeners para recarregar dados quando filtros mudarem
            document.getElementById('dataInicio').addEventListener('change', aplicarFiltros);
            document.getElementById('dataFim').addEventListener('change', aplicarFiltros);
        });

        async function carregarDadosIniciais() {
            await carregarDadosEstatisticos();
            inicializarGraficos();
            // Garantir que o gráfico de distribuição use os dados carregados
            setTimeout(() => atualizarGraficoDistribuicao(), 100);
        }

        async function carregarDadosEstatisticos() {
            try {
                const dataInicio = document.getElementById('dataInicio').value;
                const dataFim = document.getElementById('dataFim').value;

                // Carregar dados de todas as métricas
                const [docsData, confData, tempoData, usersData, tiposData, prodData] = await Promise.all([
                    fetch(`/Relatorios/DadosGraficosAvancados?dataInicio=${dataInicio}&dataFim=${dataFim}&metrica=documentos`).then(r => r.json()),
                    fetch(`/Relatorios/DadosGraficosAvancados?dataInicio=${dataInicio}&dataFim=${dataFim}&metrica=confianca`).then(r => r.json()),
                    fetch(`/Relatorios/DadosGraficosAvancados?dataInicio=${dataInicio}&dataFim=${dataFim}&metrica=tempo`).then(r => r.json()),
                    fetch(`/Relatorios/DadosGraficosAvancados?dataInicio=${dataInicio}&dataFim=${dataFim}&metrica=usuarios`).then(r => r.json()),
                    fetch(`/Relatorios/DadosGraficosAvancados?dataInicio=${dataInicio}&dataFim=${dataFim}&metrica=tipos`).then(r => r.json()),
                    carregarDadosProdutividade(dataInicio, dataFim)
                ]);

                // Extrair dados da resposta da API
                const extractData = (response) => response.success ? response.data : { labels: [], valores: [] };

                const docsDataExtracted = extractData(docsData);
                const confDataExtracted = extractData(confData);
                const tempoDataExtracted = extractData(tempoData);
                const usersDataExtracted = extractData(usersData);
                const tiposDataExtracted = extractData(tiposData);

                // Unificar labels (usar o maior conjunto de datas)
                const todasLabels = [...new Set([
                    ...docsDataExtracted.labels || [],
                    ...confDataExtracted.labels || [],
                    ...tempoDataExtracted.labels || [],
                    ...usersDataExtracted.labels || []
                ])].sort();

                dadosEstatisticos = {
                    labels: todasLabels,
                    documentos: preencherDados(docsDataExtracted, todasLabels),
                    confianca: preencherDados(confDataExtracted, todasLabels),
                    tempo: preencherDados(tempoDataExtracted, todasLabels),
                    usuarios: preencherDados(usersDataExtracted, todasLabels),
                    // Dados de tipos são diferentes (não temporais)
                    tipos: tiposDataExtracted.valores || [],
                    tiposLabels: tiposDataExtracted.labels || [],
                    // Dados de produtividade
                    produtividade: prodData.scores || [],
                    eficiencia: prodData.eficiencia || [],
                    usuariosProdutividade: prodData.usuarios || [],
                    dadosProdutividade: prodData
                };

                console.log('Dados carregados:', dadosEstatisticos);
                console.log('Dados de tipos específicos:', {
                    tipos: dadosEstatisticos.tipos,
                    tiposLabels: dadosEstatisticos.tiposLabels
                });
            } catch (error) {
                console.error('Erro ao carregar dados:', error);
                // Fallback para dados de exemplo se houver erro
                carregarDadosExemplo();
            }
        }

        function preencherDados(apiData, todasLabels) {
            if (!apiData || !apiData.labels || !apiData.valores) {
                return new Array(todasLabels.length).fill(0);
            }

            return todasLabels.map(label => {
                const index = apiData.labels.indexOf(label);
                return index >= 0 ? apiData.valores[index] : 0;
            });
        }

        function carregarDadosExemplo() {
            dadosEstatisticos = {
                documentos: [45, 52, 38, 47, 63, 41, 58, 69, 72, 55, 48, 61, 67, 59, 44],
                confianca: [89, 92, 87, 91, 94, 88, 93, 95, 96, 90, 86, 92, 94, 91, 87],
                tempo: [234, 189, 267, 201, 156, 245, 178, 134, 123, 198, 289, 167, 145, 187, 256],
                usuarios: [12, 15, 9, 14, 18, 11, 16, 19, 21, 13, 10, 17, 20, 16, 12],
                tipos: [45, 23, 18, 14],
                tiposLabels: ['Autuação', 'Defesa', 'Notificação', 'Outros'],
                labels: ['01/08', '02/08', '03/08', '04/08', '05/08', '06/08', '07/08', '08/08', '09/08', '10/08', '11/08', '12/08', '13/08', '14/08', '15/08']
            };
        }

        async function carregarDadosProdutividade(dataInicio, dataFim) {
            try {
                console.log(`🔍 Carregando dados de produtividade para período: ${dataInicio} - ${dataFim}`);
                
                // Buscar dados reais de produtividade da API
                const response = await fetch(`/Relatorios/DadosGraficosAvancados?dataInicio=${dataInicio}&dataFim=${dataFim}&metrica=produtividade`);
                const data = await response.json();

                console.log('📊 Resposta da API de produtividade:', data);

                if (data.success && data.data) {
                    console.log('✅ Dados encontrados:', {
                        usuarios: data.data.usuarios?.length || 0,
                        scores: data.data.scores?.length || 0,
                        eficiencia: data.data.eficiencia?.length || 0
                    });
                    
                    return {
                        usuarios: data.data.usuarios || [],
                        scores: data.data.scores || [],
                        eficiencia: data.data.eficiencia || [],
                        totalUsuarios: data.data.totalUsuarios || 0,
                        scoremedio: data.data.scoremedio || 0,
                        eficienciaMedia: data.data.eficienciaMedia || 0,
                        usuariosDetalhados: data.data.usuariosDetalhados || []
                    };
                } else {
                    console.log('⚠️ API retornou sucesso=false ou data vazio:', data);
                }

                // Fallback com dados de exemplo se não houver dados reais
                console.log('🔄 Usando dados de fallback');
                return {
                    usuarios: ['João Silva', 'Maria Santos', 'Pedro Oliveira', 'Ana Costa', 'Carlos Lima', 'Lucia Pereira', 'Rafael Souza', 'Fernanda Cruz'],
                    scores: [92, 88, 75, 91, 78, 85, 73, 89],
                    eficiencia: [19.2, 17.9, 12.5, 18.3, 13.1, 16.7, 11.4, 17.4],
                    totalUsuarios: 8,
                    scoremedio: 83.9,
                    eficienciaMedia: 15.8,
                    usuariosDetalhados: [
                        { nome: 'João Silva', score: 92, eficiencia: 19.2, documentos: 156, tempo: '8h 10m' },
                        { nome: 'Maria Santos', score: 88, eficiencia: 17.9, documentos: 143, tempo: '8h 00m' },
                        { nome: 'Pedro Oliveira', score: 75, eficiencia: 12.5, documentos: 100, tempo: '8h 00m' },
                        { nome: 'Ana Costa', score: 91, eficiencia: 18.3, documentos: 147, tempo: '8h 05m' },
                        { nome: 'Carlos Lima', score: 78, eficiencia: 13.1, documentos: 105, tempo: '8h 00m' },
                        { nome: 'Lucia Pereira', score: 85, eficiencia: 16.7, documentos: 134, tempo: '8h 02m' },
                        { nome: 'Rafael Souza', score: 73, eficiencia: 11.4, documentos: 91, tempo: '8h 00m' },
                        { nome: 'Fernanda Cruz', score: 89, eficiencia: 17.4, documentos: 139, tempo: '8h 00m' }
                    ]
                };
            } catch (error) {
                console.error('❌ Erro ao carregar dados de produtividade:', error);
                return {
                    usuarios: [],
                    scores: [],
                    eficiencia: [],
                    totalUsuarios: 0,
                    scoremedio: 0,
                    eficienciaMedia: 0,
                    usuariosDetalhados: []
                };
            }
        }

        function inicializarGraficos() {
            criarGraficoPrincipal();
            criarGraficoDistribuicao();
            criarGraficoBoxplot();
            criarGraficoHeatmap();
            criarGraficoSeriesTempo();
            criarGraficoProdutividade();
            atualizarCardsProdutividade();
        }

        function criarGraficoPrincipal() {
            const ctx = document.getElementById('graficoPrincipal').getContext('2d');

            graficoPrincipal = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dadosEstatisticos.labels,
                    datasets: [{
                        label: 'Documentos Processados',
                        data: dadosEstatisticos.documentos,
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.1)',
                        tension: 0.4,
                        fill: true,
                        pointRadius: 6,
                        pointHoverRadius: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        zoom: {
                            pan: {
                                enabled: true,
                                mode: 'x'
                            },
                            zoom: {
                                wheel: {
                                    enabled: true,
                                },
                                pinch: {
                                    enabled: true
                                },
                                mode: 'x',
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0,0,0,0.1)'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    },
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    },
                    onHover: (event, activeElements) => {
                        event.native.target.style.cursor = activeElements.length > 0 ? 'pointer' : 'default';
                    }
                }
            });
        }

        function criarGraficoDistribuicao() {
            const ctx = document.getElementById('graficoDistribuicao').getContext('2d');

            // Usar dados dinâmicos de tipos de documento
            const labels = dadosEstatisticos.tiposLabels && dadosEstatisticos.tiposLabels.length > 0
                ? dadosEstatisticos.tiposLabels
                : ['Autuação', 'Defesa', 'Notificação', 'Outros'];

            const data = dadosEstatisticos.tipos && dadosEstatisticos.tipos.length > 0
                ? dadosEstatisticos.tipos
                : [45, 23, 18, 14];

            // Gerar cores dinâmicas baseadas no número de categorias
            const cores = [
                'rgba(255, 99, 132, 0.8)',
                'rgba(54, 162, 235, 0.8)',
                'rgba(255, 206, 86, 0.8)',
                'rgba(75, 192, 192, 0.8)',
                'rgba(153, 102, 255, 0.8)',
                'rgba(255, 159, 64, 0.8)',
                'rgba(199, 199, 199, 0.8)',
                'rgba(83, 102, 255, 0.8)'
            ];

            const backgroundColor = labels.map((_, index) => cores[index % cores.length]);

            graficoDistribuicao = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColor,
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        function criarGraficoBoxplot() {
            // Simular boxplot com dados de confiança
            const ctx = document.getElementById('graficoBoxplot').getContext('2d');

            const confiancaDados = dadosEstatisticos.confianca;
            const quartis = calcularQuartis(confiancaDados);

            // Atualizar elementos de quartis
            document.getElementById('q1').textContent = quartis.q1.toFixed(1) + '%';
            document.getElementById('mediana').textContent = quartis.mediana.toFixed(1) + '%';
            document.getElementById('q3').textContent = quartis.q3.toFixed(1) + '%';

            graficoBoxplot = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Q1', 'Q2 (Mediana)', 'Q3', 'Máx', 'Mín'],
                    datasets: [{
                        label: 'Quartis de Confiança (%)',
                        data: [quartis.q1, quartis.mediana, quartis.q3, quartis.max, quartis.min],
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.7)',
                            'rgba(54, 162, 235, 0.7)',
                            'rgba(255, 206, 86, 0.7)',
                            'rgba(75, 192, 192, 0.7)',
                            'rgba(153, 102, 255, 0.7)'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function (value) {
                                    return value + '%';
                                }
                            }
                        }
                    }
                }
            });
        }

        function criarGraficoHeatmap() {
            // Simular heatmap de correlação
            const ctx = document.getElementById('graficoHeatmap').getContext('2d');

            // Dados de correlação simulados
            const correlacoes = [
                [1.0, 0.73, -0.45, 0.62],
                [0.73, 1.0, -0.38, 0.81],
                [-0.45, -0.38, 1.0, -0.29],
                [0.62, 0.81, -0.29, 1.0]
            ];

            const labels = ['Docs', 'Conf.', 'Tempo', 'Users'];
            const heatmapData = [];

            for (let i = 0; i < labels.length; i++) {
                for (let j = 0; j < labels.length; j++) {
                    heatmapData.push({
                        x: labels[j],
                        y: labels[i],
                        v: correlacoes[i][j]
                    });
                }
            }

            graficoHeatmap = new Chart(ctx, {
                type: 'scatter',
                data: {
                    datasets: [{
                        label: 'Correlação',
                        data: heatmapData.map(d => ({
                            x: labels.indexOf(d.x),
                            y: labels.indexOf(d.y),
                            r: Math.abs(d.v) * 20
                        })),
                        backgroundColor: heatmapData.map(d =>
                            d.v > 0 ? `rgba(54, 162, 235, ${Math.abs(d.v)})` : `rgba(255, 99, 132, ${Math.abs(d.v)})`
                        )
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            type: 'linear',
                            position: 'bottom',
                            min: -0.5,
                            max: 3.5,
                            ticks: {
                                stepSize: 1,
                                callback: function (value, index) {
                                    return labels[value];
                                }
                            }
                        },
                        y: {
                            min: -0.5,
                            max: 3.5,
                            ticks: {
                                stepSize: 1,
                                callback: function (value, index) {
                                    return labels[value];
                                }
                            }
                        }
                    }
                }
            });
        }

        function criarGraficoSeriesTempo() {
            const ctx = document.getElementById('graficoSeriesTempo').getContext('2d');

            // Gerar dados históricos + predição
            const dadosHistoricos = dadosEstatisticos.documentos;
            const modelo = document.getElementById('modeloPredicao')?.value || 'linear';
            const periodos = parseInt(document.getElementById('periodoPredicao')?.value || '7');

            const predicao = gerarPredicaoAvancada(dadosHistoricos, periodos, modelo);

            const labelsCompletos = [...dadosEstatisticos.labels, ...predicao.labels];
            const dadosCompletos = [...dadosHistoricos, ...new Array(predicao.valores.length).fill(null)];
            const dadosPredicao = [...new Array(dadosHistoricos.length).fill(null), ...predicao.valores];

            // Calcular intervalos de confiança
            const intervaloSuperior = [...new Array(dadosHistoricos.length).fill(null), ...predicao.intervaloSuperior];
            const intervaloInferior = [...new Array(dadosHistoricos.length).fill(null), ...predicao.intervaloInferior];

            graficoSeriesTempo = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labelsCompletos,
                    datasets: [{
                        label: 'Dados Históricos',
                        data: dadosCompletos,
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.1)',
                        tension: 0.4,
                        pointRadius: 4,
                        pointHoverRadius: 6
                    }, {
                        label: 'Predição (' + modelo + ')',
                        data: dadosPredicao,
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.1)',
                        borderDash: [5, 5],
                        tension: 0.4,
                        pointRadius: 4,
                        pointHoverRadius: 6
                    }, {
                        label: 'Intervalo de Confiança',
                        data: intervaloSuperior,
                        borderColor: 'rgba(75, 192, 192, 0.3)',
                        backgroundColor: 'transparent',
                        borderDash: [2, 2],
                        pointRadius: 0,
                        fill: '+1'
                    }, {
                        label: '',
                        data: intervaloInferior,
                        borderColor: 'rgba(75, 192, 192, 0.3)',
                        backgroundColor: 'rgba(75, 192, 192, 0.1)',
                        borderDash: [2, 2],
                        pointRadius: 0,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Documentos Processados'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Período'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top',
                            labels: {
                                filter: function (item) {
                                    return item.text !== '';
                                }
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false
                        }
                    }
                }
            });
        }

        function criarGraficoProdutividade() {
            const ctx = document.getElementById('graficoProdutividade').getContext('2d');

            const scores = dadosEstatisticos.produtividade || [];
            const eficiencia = dadosEstatisticos.eficiencia || [];
            const usuarios = dadosEstatisticos.usuariosProdutividade || [];

            // Se não há usuários, usar labels temporais como fallback
            const labels = usuarios.length > 0 ? usuarios : dadosEstatisticos.labels || [];

            graficoProdutividade = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Score de Produtividade',
                        data: scores,
                        backgroundColor: scores.map(score => {
                            if (score >= 90) return 'rgba(40, 167, 69, 0.8)'; // Verde para excelente
                            if (score >= 80) return 'rgba(54, 162, 235, 0.8)'; // Azul para bom
                            if (score >= 70) return 'rgba(255, 193, 7, 0.8)'; // Amarelo para regular
                            return 'rgba(220, 53, 69, 0.8)'; // Vermelho para baixo
                        }),
                        borderColor: scores.map(score => {
                            if (score >= 90) return 'rgb(40, 167, 69)';
                            if (score >= 80) return 'rgb(54, 162, 235)';
                            if (score >= 70) return 'rgb(255, 193, 7)';
                            return 'rgb(220, 53, 69)';
                        }),
                        borderWidth: 2,
                        yAxisID: 'y'
                    }, {
                        label: 'Eficiência (Docs/Hora)',
                        data: eficiencia,
                        type: 'line',
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.1)',
                        tension: 0.4,
                        yAxisID: 'y1',
                        pointRadius: 6,
                        pointHoverRadius: 8,
                        pointBackgroundColor: 'rgb(255, 99, 132)',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                title: function (context) {
                                    return `Usuário: ${context[0].label}`;
                                },
                                label: function (context) {
                                    if (context.datasetIndex === 0) {
                                        const score = context.parsed.y;
                                        let nivel = '';
                                        if (score >= 90) nivel = ' (Excelente)';
                                        else if (score >= 80) nivel = ' (Bom)';
                                        else if (score >= 70) nivel = ' (Regular)';
                                        else nivel = ' (Precisa Melhorar)';
                                        return `Score: ${score}${nivel}`;
                                    } else {
                                        return `Eficiência: ${context.parsed.y.toFixed(1)} docs/h`;
                                    }
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: usuarios.length > 0 ? 'Usuários' : 'Período'
                            },
                            ticks: {
                                maxRotation: 45,
                                minRotation: 0
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Score de Produtividade'
                            },
                            min: 0,
                            max: 100,
                            ticks: {
                                callback: function (value) {
                                    return value + '%';
                                }
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Documentos por Hora'
                            },
                            min: 0,
                            grid: {
                                drawOnChartArea: false,
                            },
                            ticks: {
                                callback: function (value) {
                                    return value.toFixed(1) + ' docs/h';
                                }
                            }
                        }
                    }
                }
            });
        }

        function atualizarCardsProdutividade() {
            const dados = dadosEstatisticos.dadosProdutividade || {};

            document.getElementById('totalUsuariosAtivos').textContent = dados.totalUsuarios || '-';
            document.getElementById('produtividadeMedia').textContent = dados.scoremedio ? dados.scoremedio.toFixed(1) : '-';
            document.getElementById('eficienciaMedia').textContent = dados.eficienciaMedia ? dados.eficienciaMedia.toFixed(1) : '-';

            // Atualizar tabela de detalhes
            atualizarTabelaProdutividade();
        }

        function atualizarTabelaProdutividade() {
            const tbody = document.getElementById('corpoTabelaProdutividade');
            const usuarios = dadosEstatisticos.dadosProdutividade?.usuariosDetalhados || [];

            if (usuarios.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">Nenhum dado de usuário disponível</td></tr>';
                return;
            }

            tbody.innerHTML = usuarios.map(usuario => {
                const scoreClass = usuario.score >= 90 ? 'success' :
                    usuario.score >= 80 ? 'primary' :
                        usuario.score >= 70 ? 'warning' : 'danger';

                return `
                        <tr>
                            <td>
                                <strong>${usuario.nome}</strong>
                            </td>
                            <td>
                                <span class="badge bg-${scoreClass}">${usuario.score}</span>
                            </td>
                            <td>
                                <span class="text-info">${usuario.eficiencia.toFixed(1)} docs/h</span>
                            </td>
                            <td>
                                <span class="text-success">${usuario.documentos}</span>
                            </td>
                            <td>
                                <span class="text-muted">${usuario.tempo}</span>
                            </td>
                        </tr>
                    `;
            }).join('');
        }

        function alterarVisualizacaoProdutividade() {
            if (!graficoProdutividade) return;

            const tipoAtual = graficoProdutividade.config.type;
            const novoTipo = tipoAtual === 'bar' ? 'line' : 'bar';

            graficoProdutividade.config.type = novoTipo;

            if (novoTipo === 'line') {
                graficoProdutividade.data.datasets[0].type = 'line';
                graficoProdutividade.data.datasets[0].tension = 0.4;
                graficoProdutividade.data.datasets[0].fill = false;
            } else {
                graficoProdutividade.data.datasets[0].type = 'bar';
                delete graficoProdutividade.data.datasets[0].tension;
                delete graficoProdutividade.data.datasets[0].fill;
            }

            graficoProdutividade.update('active');
        }

        // Funções utilitárias
        function calcularQuartis(dados) {
            const sorted = dados.slice().sort((a, b) => a - b);
            const q1 = percentil(sorted, 25);
            const mediana = percentil(sorted, 50);
            const q3 = percentil(sorted, 75);

            return {
                min: Math.min(...sorted),
                q1: q1,
                mediana: mediana,
                q3: q3,
                max: Math.max(...sorted)
            };
        }

        function percentil(arr, p) {
            const index = (p / 100) * (arr.length - 1);
            const lower = Math.floor(index);
            const upper = Math.ceil(index);
            const weight = index % 1;

            if (upper >= arr.length) return arr[lower];
            return arr[lower] * (1 - weight) + arr[upper] * weight;
        }

        function gerarPredicao(dados, periodos) {
            // Regressão linear simples
            const n = dados.length;
            const x = Array.from({ length: n }, (_, i) => i);
            const y = dados;

            const sumX = x.reduce((a, b) => a + b, 0);
            const sumY = y.reduce((a, b) => a + b, 0);
            const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
            const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);

            const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
            const intercept = (sumY - slope * sumX) / n;

            const valores = [];
            const labels = [];

            for (let i = 0; i < periodos; i++) {
                const proximoX = n + i;
                const valor = Math.round(slope * proximoX + intercept);
                valores.push(valor > 0 ? valor : 0);

                const data = new Date();
                data.setDate(data.getDate() + i + 1);
                labels.push(data.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' }));
            }

            return { valores, labels };
        }

        function gerarPredicaoAvancada(dados, periodos, modelo) {
            const n = dados.length;
            let valores = [];
            let labels = [];
            let intervaloSuperior = [];
            let intervaloInferior = [];

            // Calcular erro padrão baseado nos dados históricos
            const erroMedio = calcularErroMedio(dados);
            const multiplicadorConfianca = 1.96; // 95% de confiança

            switch (modelo) {
                case 'linear':
                    const regressao = calcularRegressaoLinear(dados);
                    for (let i = 0; i < periodos; i++) {
                        const proximoX = n + i;
                        const valor = Math.max(0, Math.round(regressao.slope * proximoX + regressao.intercept));
                        valores.push(valor);
                        intervaloSuperior.push(valor + multiplicadorConfianca * erroMedio);
                        intervaloInferior.push(Math.max(0, valor - multiplicadorConfianca * erroMedio));
                    }
                    break;

                case 'moving_average':
                    const janela = Math.min(7, Math.floor(n / 3));
                    const media = dados.slice(-janela).reduce((a, b) => a + b, 0) / janela;
                    for (let i = 0; i < periodos; i++) {
                        // Usar variação determinística baseada no período
                        const variacao = Math.sin(i * 0.5) * erroMedio * 0.3;
                        const valor = Math.max(0, Math.round(media + variacao));
                        valores.push(valor);
                        intervaloSuperior.push(valor + multiplicadorConfianca * erroMedio);
                        intervaloInferior.push(Math.max(0, valor - multiplicadorConfianca * erroMedio));
                    }
                    break;

                case 'exponential':
                    const alpha = 0.3; // Fator de suavização
                    let ultimoValor = dados[dados.length - 1];
                    for (let i = 0; i < periodos; i++) {
                        const valor = Math.max(0, Math.round(ultimoValor));
                        valores.push(valor);
                        intervaloSuperior.push(valor + multiplicadorConfianca * erroMedio * (i + 1) * 0.5);
                        intervaloInferior.push(Math.max(0, valor - multiplicadorConfianca * erroMedio * (i + 1) * 0.5));
                        ultimoValor = alpha * ultimoValor + (1 - alpha) * valor;
                    }
                    break;

                default:
                    // Fallback para linear
                    return gerarPredicaoAvancada(dados, periodos, 'linear');
            }

            // Gerar labels de data
            for (let i = 0; i < periodos; i++) {
                const data = new Date();
                data.setDate(data.getDate() + i + 1);
                labels.push(data.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' }));
            }

            // Debug: Log para verificar se os modelos estão gerando valores diferentes
            console.log('Predição - Modelo: ' + modelo + ', Períodos: ' + periodos + ', Primeiros valores:', valores.slice(0, 3));

            return { valores, labels, intervaloSuperior, intervaloInferior, modelo, r2: calcularR2(dados) };
        }

        function calcularRegressaoLinear(dados) {
            const n = dados.length;
            const x = Array.from({ length: n }, (_, i) => i);
            const y = dados;

            const sumX = x.reduce((a, b) => a + b, 0);
            const sumY = y.reduce((a, b) => a + b, 0);
            const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
            const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);

            const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
            const intercept = (sumY - slope * sumX) / n;

            return { slope, intercept };
        }

        function calcularErroMedio(dados) {
            if (dados.length < 2) return 10;

            const diferencas = [];
            for (let i = 1; i < dados.length; i++) {
                diferencas.push(Math.abs(dados[i] - dados[i - 1]));
            }

            return diferencas.reduce((a, b) => a + b, 0) / diferencas.length;
        }

        function calcularR2(dados) {
            if (dados.length < 3) return 0.5;

            const regressao = calcularRegressaoLinear(dados);
            const media = dados.reduce((a, b) => a + b, 0) / dados.length;

            let ssRes = 0; // Soma dos quadrados dos resíduos
            let ssTot = 0; // Soma total dos quadrados

            dados.forEach((valor, i) => {
                const predicao = regressao.slope * i + regressao.intercept;
                ssRes += Math.pow(valor - predicao, 2);
                ssTot += Math.pow(valor - media, 2);
            });

            return ssTot === 0 ? 0 : Math.max(0, 1 - (ssRes / ssTot));
        }

        // Funções de interação
        function alterarTipoGrafico() {
            const tipo = document.getElementById('tipoGrafico').value;

            if (graficoPrincipal) {
                graficoPrincipal.config.type = tipo;
                graficoPrincipal.update();
            }
        }

        function mostrarEstatisticas() {
            const metrica = document.getElementById('metrica').value;
            let dados = dadosEstatisticos.documentos;

            switch (metrica) {
                case 'confianca': dados = dadosEstatisticos.confianca; break;
                case 'tempo': dados = dadosEstatisticos.tempo; break;
                case 'usuarios': dados = dadosEstatisticos.usuarios; break;
                case 'tipos': dados = dadosEstatisticos.tipos; break;
            }

            // Calcular estatísticas
            const media = dados.reduce((a, b) => a + b) / dados.length;
            const mediana = percentil(dados.slice().sort((a, b) => a - b), 50);
            const moda = calcularModa(dados);
            const desvio = Math.sqrt(dados.reduce((sum, x) => sum + Math.pow(x - media, 2), 0) / dados.length);
            const variancia = Math.pow(desvio, 2);
            const amplitude = Math.max(...dados) - Math.min(...dados);
            const quartis = calcularQuartis(dados);

            // Preencher modal
            document.getElementById('estatMedia').textContent = media.toFixed(2);
            document.getElementById('estatMediana').textContent = mediana.toFixed(2);
            document.getElementById('estatModa').textContent = moda;
            document.getElementById('estatDesvio').textContent = desvio.toFixed(2);
            document.getElementById('estatVariancia').textContent = variancia.toFixed(2);
            document.getElementById('estatAmplitude').textContent = amplitude.toFixed(2);
            document.getElementById('estatQ1').textContent = quartis.q1.toFixed(2);
            document.getElementById('estatQ2').textContent = quartis.mediana.toFixed(2);
            document.getElementById('estatQ3').textContent = quartis.q3.toFixed(2);
            document.getElementById('estatIQR').textContent = (quartis.q3 - quartis.q1).toFixed(2);

            new bootstrap.Modal(document.getElementById('modalEstatisticas')).show();
        }

        function calcularModa(dados) {
            const frequencia = {};
            dados.forEach(valor => {
                frequencia[valor] = (frequencia[valor] || 0) + 1;
            });

            let maxFreq = 0;
            let moda = [];

            for (let valor in frequencia) {
                if (frequencia[valor] > maxFreq) {
                    maxFreq = frequencia[valor];
                    moda = [valor];
                } else if (frequencia[valor] === maxFreq) {
                    moda.push(valor);
                }
            }

            return moda.length === dados.length ? 'Sem moda' : moda.join(', ');
        }

        async function aplicarFiltros() {
            showToast.info('Atualizando', 'Carregando dados com novos filtros...');

            try {
                await carregarDadosEstatisticos();
                atualizarTodosGraficos();
                // Garantir que o gráfico de distribuição seja atualizado com os novos dados
                atualizarGraficoDistribuicao();
                showToast.success('Concluído', 'Gráficos atualizados com sucesso!');
            } catch (error) {
                showToast.error('Erro', 'Falha ao atualizar dados: ' + error.message);
            }
        }

        function atualizarTodosGraficos() {
            // Destruir gráficos existentes
            if (graficoPrincipal) graficoPrincipal.destroy();
            if (graficoDistribuicao) graficoDistribuicao.destroy();
            if (graficoBoxplot) graficoBoxplot.destroy();
            if (graficoHeatmap) graficoHeatmap.destroy();
            if (graficoSeriesTempo) graficoSeriesTempo.destroy();
            if (graficoProdutividade) graficoProdutividade.destroy();

            // Recriar gráficos com novos dados
            inicializarGraficos();
        }

        function atualizarGraficoDistribuicao() {
            if (graficoDistribuicao) {
                // Usar dados dinâmicos de tipos de documento
                const labels = dadosEstatisticos.tiposLabels && dadosEstatisticos.tiposLabels.length > 0
                    ? dadosEstatisticos.tiposLabels
                    : ['Autuação', 'Defesa', 'Notificação', 'Outros'];

                const data = dadosEstatisticos.tipos && dadosEstatisticos.tipos.length > 0
                    ? dadosEstatisticos.tipos
                    : [45, 23, 18, 14];

                console.log('Atualizando gráfico de distribuição com:', { labels, data });

                // Gerar cores dinâmicas baseadas no número de categorias
                const cores = [
                    'rgba(255, 99, 132, 0.8)',
                    'rgba(54, 162, 235, 0.8)',
                    'rgba(255, 206, 86, 0.8)',
                    'rgba(75, 192, 192, 0.8)',
                    'rgba(153, 102, 255, 0.8)',
                    'rgba(255, 159, 64, 0.8)',
                    'rgba(199, 199, 199, 0.8)',
                    'rgba(83, 102, 255, 0.8)'
                ];

                const backgroundColor = labels.map((_, index) => cores[index % cores.length]);

                // Atualizar dados do gráfico
                graficoDistribuicao.data.labels = labels;
                graficoDistribuicao.data.datasets[0].data = data;
                graficoDistribuicao.data.datasets[0].backgroundColor = backgroundColor;

                graficoDistribuicao.update('active');
            } else {
                console.warn('Gráfico de distribuição não está inicializado');
            }
        }

        function atualizarDados() {
            const metrica = document.getElementById('metrica').value;

            if (graficoPrincipal) {
                let dados, label, cor;

                switch (metrica) {
                    case 'documentos':
                        dados = dadosEstatisticos.documentos;
                        label = 'Documentos Processados';
                        cor = 'rgb(54, 162, 235)';
                        break;
                    case 'confianca':
                        dados = dadosEstatisticos.confianca;
                        label = 'Confiança Média (%)';
                        cor = 'rgb(75, 192, 192)';
                        break;
                    case 'tempo':
                        dados = dadosEstatisticos.tempo;
                        label = 'Tempo de Processamento (s)';
                        cor = 'rgb(255, 99, 132)';
                        break;
                    case 'usuarios':
                        dados = dadosEstatisticos.usuarios;
                        label = 'Usuários Ativos';
                        cor = 'rgb(255, 205, 86)';
                        break;
                    case 'tipos':
                        dados = dadosEstatisticos.tipos || [];
                        label = 'Tipos de Documento';
                        cor = 'rgb(153, 102, 255)';
                        // Para tipos de documento, mudar para gráfico de barras
                        if (graficoPrincipal.config.type !== 'bar') {
                            graficoPrincipal.config.type = 'bar';
                            document.getElementById('tipoGrafico').value = 'bar';
                        }
                        break;
                    case 'produtividade':
                        dados = dadosEstatisticos.produtividade || [];
                        label = 'Score de Produtividade';
                        cor = 'rgb(54, 162, 235)';
                        break;
                    case 'eficiencia':
                        dados = dadosEstatisticos.eficiencia || [];
                        label = 'Eficiência (Docs/Hora)';
                        cor = 'rgb(255, 159, 64)';
                        break;
                    default:
                        dados = dadosEstatisticos.documentos;
                        label = 'Documentos Processados';
                        cor = 'rgb(54, 162, 235)';
                }

                graficoPrincipal.data.datasets[0].data = dados;
                graficoPrincipal.data.datasets[0].label = label;
                graficoPrincipal.data.datasets[0].borderColor = cor;
                graficoPrincipal.data.datasets[0].backgroundColor = cor.replace('rgb', 'rgba').replace(')', ', 0.1)');

                // Atualizar labels baseado na métrica
                if (metrica === 'tipos' && dadosEstatisticos.tiposLabels) {
                    graficoPrincipal.data.labels = dadosEstatisticos.tiposLabels;
                } else {
                    graficoPrincipal.data.labels = dadosEstatisticos.labels;
                }

                // Atualizar título do gráfico
                document.getElementById('tituloGraficoPrincipal').textContent = `Evolução Temporal - ${label}`;

                graficoPrincipal.update('active');
            }

            // Sempre atualizar o gráfico de distribuição quando os dados mudarem
            atualizarGraficoDistribuicao();
        }

        function resetarFiltros() {
            document.getElementById('dataInicio').value = '@DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd")';
            document.getElementById('dataFim').value = '@DateTime.Now.ToString("yyyy-MM-dd")';
            document.getElementById('tipoGrafico').value = 'line';
            document.getElementById('metrica').value = 'documentos';
            aplicarFiltros();
        }

        function alterarTipoGrafico() {
            const novoTipo = document.getElementById('tipoGrafico').value;

            if (graficoPrincipal) {
                graficoPrincipal.config.type = novoTipo;

                // Ajustar configurações específicas por tipo
                if (novoTipo === 'doughnut' || novoTipo === 'pie') {
                    graficoPrincipal.config.options.scales = {};
                } else {
                    graficoPrincipal.config.options.scales = {
                        x: { display: true },
                        y: { display: true, beginAtZero: true }
                    };
                }

                graficoPrincipal.update('active');
            }
        }

        function resetZoom() {
            if (graficoPrincipal) {
                graficoPrincipal.resetZoom();
            }
        }

        function togglePan() {
            showToast.info('Pan/Zoom', 'Use a roda do mouse para zoom e arraste para navegar');
        }

        function atualizarPredicao() {
            // Automaticamente recalcula a predição quando os parâmetros mudam
            calcularPredicao();
        }

        function calcularPredicao() {
            const periodo = parseInt(document.getElementById('periodoPredicao').value);
            const modelo = document.getElementById('modeloPredicao').value;

            showToast.info('Calculando', 'Gerando predição para ' + periodo + ' dias usando modelo ' + modelo);

            // Destruir gráfico existente se houver
            if (graficoSeriesTempo) {
                graficoSeriesTempo.destroy();
                graficoSeriesTempo = null;
            }

            // Recriar imediatamente com novos parâmetros
            criarGraficoSeriesTempo();
            showToast.success('Concluído', 'Predição calculada com sucesso');
        }

        function exportarGraficos() {
            showToast.info('Exportando', 'Gerando arquivo com todos os gráficos...');

            try {
                const graficos = [];

                // Capturar cada gráfico como imagem
                if (graficoPrincipal) {
                    graficos.push({
                        nome: 'Gráfico Principal',
                        imagem: graficoPrincipal.toBase64Image()
                    });
                }

                if (graficoDistribuicao) {
                    graficos.push({
                        nome: 'Distribuição',
                        imagem: graficoDistribuicao.toBase64Image()
                    });
                }

                if (graficoBoxplot) {
                    graficos.push({
                        nome: 'Box Plot',
                        imagem: graficoBoxplot.toBase64Image()
                    });
                }

                // Criar um arquivo de download com as imagens
                const dataAtual = new Date().toLocaleDateString('pt-BR');
                const nomeArquivo = `graficos_estatisticos_${dataAtual.replace(/\//g, '-')}.json`;

                const dadosExport = {
                    data: dataAtual,
                    filtros: {
                        dataInicio: document.getElementById('dataInicio').value,
                        dataFim: document.getElementById('dataFim').value,
                        metrica: document.getElementById('metrica').value
                    },
                    graficos: graficos,
                    dadosEstatisticos: dadosEstatisticos
                };

                const blob = new Blob([JSON.stringify(dadosExport, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);

                const link = document.createElement('a');
                link.href = url;
                link.download = nomeArquivo;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(url);

                showToast.success('Exportado', 'Gráficos e dados exportados com sucesso!');
            } catch (error) {
                showToast.error('Erro', 'Falha ao exportar: ' + error.message);
            }
        }

        function gerarRelatorio() {
            showToast.info('Gerando', 'Criando relatório completo da análise...');

            try {
                const dataInicio = document.getElementById('dataInicio').value;
                const dataFim = document.getElementById('dataFim').value;

                // Calcular estatísticas resumidas
                const stats = {
                    documentos: calcularEstatisticas(dadosEstatisticos.documentos),
                    confianca: calcularEstatisticas(dadosEstatisticos.confianca),
                    tempo: calcularEstatisticas(dadosEstatisticos.tempo),
                    usuarios: calcularEstatisticas(dadosEstatisticos.usuarios)
                };

                const relatorio = `
                    RELATÓRIO ESTATÍSTICO - CLASSIFICADOR DE DOCUMENTOS
                    ================================================

                    Período: ${dataInicio} a ${dataFim}
                    Data do Relatório: ${new Date().toLocaleDateString('pt-BR')} ${new Date().toLocaleTimeString('pt-BR')}

                    RESUMO EXECUTIVO
                    ================
                    • Total de documentos processados: ${dadosEstatisticos.documentos.reduce((a, b) => a + b, 0)}
                    • Confiança média: ${stats.confianca.media.toFixed(2)}%
                    • Tempo médio de processamento: ${stats.tempo.media.toFixed(1)}s
                    • Usuários ativos (média): ${stats.usuarios.media.toFixed(0)}

                    ESTATÍSTICAS DETALHADAS
                    ======================

                    Documentos Processados:
                    • Média: ${stats.documentos.media.toFixed(1)}
                    • Mediana: ${stats.documentos.mediana.toFixed(1)}
                    • Desvio Padrão: ${stats.documentos.desvio.toFixed(1)}
                    • Mínimo: ${stats.documentos.min}
                    • Máximo: ${stats.documentos.max}

                    Confiança (%):
                    • Média: ${stats.confianca.media.toFixed(2)}%
                    • Mediana: ${stats.confianca.mediana.toFixed(2)}%
                    • Desvio Padrão: ${stats.confianca.desvio.toFixed(2)}%
                    • Mínimo: ${stats.confianca.min.toFixed(2)}%
                    • Máximo: ${stats.confianca.max.toFixed(2)}%

                    Tempo de Processamento (segundos):
                    • Média: ${stats.tempo.media.toFixed(1)}s
                    • Mediana: ${stats.tempo.mediana.toFixed(1)}s
                    • Desvio Padrão: ${stats.tempo.desvio.toFixed(1)}s
                    • Mínimo: ${stats.tempo.min.toFixed(1)}s
                    • Máximo: ${stats.tempo.max.toFixed(1)}s

                    Usuários Ativos:
                    • Média: ${stats.usuarios.media.toFixed(1)}
                    • Mediana: ${stats.usuarios.mediana.toFixed(1)}
                    • Desvio Padrão: ${stats.usuarios.desvio.toFixed(1)}
                    • Mínimo: ${stats.usuarios.min}
                    • Máximo: ${stats.usuarios.max}

                    ANÁLISE DE TENDÊNCIAS
                    ====================
                    ${analisarTendencias()}

                    Relatório gerado automaticamente pelo Sistema Classificador de Documentos
                    `;

                const blob = new Blob([relatorio], { type: 'text/plain;charset=utf-8' });
                const url = URL.createObjectURL(blob);

                const link = document.createElement('a');
                link.href = url;
                link.download = `relatorio_estatistico_${new Date().toISOString().split('T')[0]}.txt`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(url);

                showToast.success('Relatório Pronto', 'Relatório estatístico gerado e baixado com sucesso!');
            } catch (error) {
                showToast.error('Erro', 'Falha ao gerar relatório: ' + error.message);
            }
        }

        function calcularEstatisticas(dados) {
            if (!dados || dados.length === 0) return { media: 0, mediana: 0, desvio: 0, min: 0, max: 0 };

            const ordenados = [...dados].sort((a, b) => a - b);
            const media = dados.reduce((a, b) => a + b, 0) / dados.length;
            const mediana = ordenados.length % 2 === 0
                ? (ordenados[ordenados.length / 2 - 1] + ordenados[ordenados.length / 2]) / 2
                : ordenados[Math.floor(ordenados.length / 2)];

            const variancia = dados.reduce((acc, val) => acc + Math.pow(val - media, 2), 0) / dados.length;
            const desvio = Math.sqrt(variancia);

            return {
                media,
                mediana,
                desvio,
                min: Math.min(...dados),
                max: Math.max(...dados)
            };
        }

        function analisarTendencias() {
            const docs = dadosEstatisticos.documentos;
            const conf = dadosEstatisticos.confianca;

            if (docs.length < 2) return 'Dados insuficientes para análise de tendências.';

            // Calcular tendência simples (linear)
            const tendenciaDocs = docs[docs.length - 1] - docs[0];
            const tendenciaConf = conf[conf.length - 1] - conf[0];

            let analise = '';

            if (tendenciaDocs > 0) {
                analise += '• Tendência crescente no processamento de documentos.\n';
            } else if (tendenciaDocs < 0) {
                analise += '• Tendência decrescente no processamento de documentos.\n';
            } else {
                analise += '• Processamento de documentos estável.\n';
            }

            if (tendenciaConf > 0) {
                analise += '• Melhoria na confiança das classificações.\n';
            } else if (tendenciaConf < 0) {
                analise += '• Diminuição na confiança das classificações.\n';
            } else {
                analise += '• Confiança das classificações estável.\n';
            }

            return analise;
        }

        // Funções para opções dos gráficos
        function toggleAnimacao() {
            if (graficoPrincipal) {
                const animacaoAtiva = graficoPrincipal.options.animation !== false;
                graficoPrincipal.options.animation = !animacaoAtiva;
                graficoPrincipal.update();
                showToast.info('Animação', animacaoAtiva ? 'Animação desabilitada' : 'Animação habilitada');
            }
        }

        function alterarEscala() {
            if (graficoPrincipal) {
                const escalaLinear = graficoPrincipal.options.scales.y.type !== 'logarithmic';
                graficoPrincipal.options.scales.y.type = escalaLinear ? 'logarithmic' : 'linear';
                graficoPrincipal.update();
                showToast.info('Escala', escalaLinear ? 'Escala logarítmica ativada' : 'Escala linear ativada');
            }
        }

        function mostrarTendencia() {
            if (graficoPrincipal) {
                // Adicionar linha de tendência simples
                const dados = graficoPrincipal.data.datasets[0].data;
                const tendencia = calcularTendenciaLinear(dados);

                // Verificar se já existe dataset de tendência
                const indiceTendencia = graficoPrincipal.data.datasets.findIndex(d => d.label === 'Tendência');

                if (indiceTendencia >= 0) {
                    // Remover tendência existente
                    graficoPrincipal.data.datasets.splice(indiceTendencia, 1);
                    showToast.info('Tendência', 'Linha de tendência removida');
                } else {
                    // Adicionar nova tendência
                    graficoPrincipal.data.datasets.push({
                        label: 'Tendência',
                        data: tendencia,
                        borderColor: 'rgba(255, 99, 132, 0.8)',
                        backgroundColor: 'transparent',
                        borderDash: [10, 5],
                        pointRadius: 0,
                        tension: 0
                    });
                    showToast.info('Tendência', 'Linha de tendência adicionada');
                }

                graficoPrincipal.update();
            }
        }

        function calcularTendenciaLinear(dados) {
            const n = dados.length;
            const x = Array.from({ length: n }, (_, i) => i);
            const y = dados;

            const sumX = x.reduce((a, b) => a + b, 0);
            const sumY = y.reduce((a, b) => a + b, 0);
            const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
            const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);

            const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
            const intercept = (sumY - slope * sumX) / n;

            return x.map(xi => slope * xi + intercept);
        }

        function exportarGrafico(tipo) {
            let grafico = null;
            let nome = '';

            switch (tipo) {
                case 'principal':
                    grafico = graficoPrincipal;
                    nome = 'grafico_principal';
                    break;
                case 'distribuicao':
                    grafico = graficoDistribuicao;
                    nome = 'grafico_distribuicao';
                    break;
                case 'boxplot':
                    grafico = graficoBoxplot;
                    nome = 'grafico_boxplot';
                    break;
                case 'heatmap':
                    grafico = graficoHeatmap;
                    nome = 'grafico_heatmap';
                    break;
                case 'series':
                    grafico = graficoSeriesTempo;
                    nome = 'grafico_series_tempo';
                    break;
            }

            if (grafico) {
                const link = document.createElement('a');
                link.download = `${nome}_${new Date().toISOString().split('T')[0]}.png`;
                link.href = grafico.toBase64Image();
                link.click();
                showToast.success('Exportado', `Gráfico ${nome} exportado como PNG`);
            }
        }

        function exportarEstatisticas() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('modalEstatisticas'));
            if (modal) modal.hide();

            const dados = {
                data: new Date().toLocaleDateString('pt-BR'),
                estatisticas: {
                    media: document.getElementById('estatMedia').textContent,
                    mediana: document.getElementById('estatMediana').textContent,
                    moda: document.getElementById('estatModa').textContent,
                    desvio: document.getElementById('estatDesvio').textContent,
                    variancia: document.getElementById('estatVariancia').textContent,
                    amplitude: document.getElementById('estatAmplitude').textContent,
                    q1: document.getElementById('estatQ1').textContent,
                    q2: document.getElementById('estatQ2').textContent,
                    q3: document.getElementById('estatQ3').textContent,
                    iqr: document.getElementById('estatIQR').textContent
                }
            };

            const blob = new Blob([JSON.stringify(dados, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);

            const link = document.createElement('a');
            link.href = url;
            link.download = `estatisticas_descritivas_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);

            showToast.success('Exportado', 'Estatísticas descritivas exportadas');
        }
    </script>
}

@section Styles {
    <style>
        .card {
            transition: transform 0.2s;
        }

        .card:hover {
            transform: translateY(-2px);
        }

        .chart-container {
            position: relative;
            height: 400px;
        }

        .stat-card {
            border-left: 4px solid #007bff;
        }

        .correlation-high {
            background-color: rgba(54, 162, 235, 0.8) !important;
        }

        .correlation-medium {
            background-color: rgba(255, 206, 86, 0.8) !important;
        }

        .correlation-low {
            background-color: rgba(255, 99, 132, 0.8) !important;
        }
    </style>
}
